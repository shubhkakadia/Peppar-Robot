<?xml version="1.0" encoding="UTF-8" ?><ChoregrapheProject xmlns="http://www.aldebaran-robotics.com/schema/choregraphe/project.xsd" xar_version="3"><Box name="root" id="-1" localization="8" tooltip="Root box of Choregraphe&apos;s behavior. Highest level possible." x="0" y="0"><bitmap>media/images/box/root.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Input name="clickedListen" type="0" type_size="1" nature="4" stm_value_name="clickedListen" inner="1" tooltip="clickedListen desc" id="4" /><Input name="WavingDetection/Waving" type="0" type_size="1" nature="4" stm_value_name="WavingDetection/Waving" inner="1" tooltip="WavingDetection/Waving desc" id="5" /><Input name="WavingDetection/PersonWaving" type="0" type_size="1" nature="4" stm_value_name="WavingDetection/PersonWaving" inner="1" tooltip="WavingDetection/PersonWaving desc" id="6" /><Input name="GazeAnalysis/PersonStartsLookingAtRobot" type="0" type_size="1" nature="4" stm_value_name="GazeAnalysis/PersonStartsLookingAtRobot" inner="1" tooltip="GazeAnalysis/PersonStartsLookingAtRobot desc" id="7" /><Input name="EngagementZones/PersonEnteredZone2" type="0" type_size="1" nature="4" stm_value_name="EngagementZones/PersonEnteredZone2" inner="1" tooltip="EngagementZones/PersonEnteredZone2 desc" id="8" /><Input name="EngagementZones/PersonEnteredZone1" type="0" type_size="1" nature="4" stm_value_name="EngagementZones/PersonEnteredZone1" inner="1" tooltip="EngagementZones/PersonEnteredZone1 desc" id="9" /><Input name="EngagementZones/PersonApproached" type="0" type_size="1" nature="4" stm_value_name="EngagementZones/PersonApproached" inner="1" tooltip="EngagementZones/PersonApproached desc" id="10" /><Input name="EngagementZones/PersonMovedAway" type="0" type_size="1" nature="4" stm_value_name="EngagementZones/PersonMovedAway" inner="1" tooltip="EngagementZones/PersonMovedAway desc" id="11" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="12" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram scale="59.4604"><Box name="Confdence Treshold" id="1" localization="8" tooltip="" x="141" y="66"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.ALDialog = ALProxy('ALDialog')

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        #self.onStopped() #activate the output of the box
        # ALDialog = ALProxy('ALDialog')
        if self.ALDialog:
            self.ALDialog.setASRConfidenceThreshold(0.4)
        self.onStopped()

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Box name="Active Listening" id="3" localization="8" tooltip="" x="116" y="285"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.als = ALProxy('ALSpeechRecognition')

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        #self.onStopped() #activate the output of the box
        self.logger.info("RUNNING ENABLE LISTEN")
        self.als.pause(False)
        self.onStopped()

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Box name="main" id="5" localization="8" tooltip="" x="679" y="7"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)



    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        #self.onStopped() #activate the output of the box

        uid = self.packageUid()
        self.session().service('ALTabletService').loadApplication(uid)
        self.session().service('ALTabletService').showWebview()
        print("uid: "+uid)
        #self.asr_service.subscribe("my_box")
        #self.asr_service.pause(False)

    def onInput_onStop(self):
        #self.asr_service.pause(True)
        #self.asr_service.unsubscribe("my_box")
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box





#    def onWordRecognized(self, event):
#        if event == "menu":
#            # Load page one
#            uid = self.packageUid()
#            #self.session().service('ALTabletService').loadApplication(uid)

#            # method2: use loadUrl
#            #ip = self.session().service('ALTabletService').getRobotIp()
#            ip = '192.168.0.160'
#            url = 'http://' + ip + '/apps/' + uid + '/pages/menu.html'
#            self.session().service('ALTabletService').loadUrl(url)

#            # Show the loaded page
#            self.session().service('ALTabletService').showWebview()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Box name="Say Text" id="13" localization="8" tooltip="Say the text received on its input." x="343" y="604"><bitmap>media/images/box/interaction/say.png</bitmap><script language="4"><content><![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence))
            self.ids.append(id)
            self.tts.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" /><Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" /><Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" /><Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="95" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" /><Resource name="Speech" type="Lock" timeout="0" /></Box><Box name="Text Edit" id="14" localization="8" tooltip="Send the text you entered when the input is stimulated." plugin="textedit_plugin" x="104" y="450"><bitmap>media/images/box/interaction/vocabulary.png</bitmap><script language="4"><content><![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("Hi! I\'m Pepper!Welcome to the clinic! .. Don\'t be shy, come and say Hi!")]]></content></script><pluginContent><text><![CDATA[Hi! I'm Pepper!Welcome to the clinic! .. Don't be shy, come and say Hi!]]></text></pluginContent><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" /><Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" /></Box><Box name="chat (1)" id="15" localization="8" tooltip="" x="311" y="131"><dialogFile>../chat/chat.dlg</dialogFile><bitmap>media/images/box/box-dialog.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Input name="displayMenu" type="1" type_size="1" nature="1" inner="0" tooltip="" id="4" /><Input name="displayAboutus" type="1" type_size="1" nature="1" inner="0" tooltip="" id="5" /><Input name="displayNavigate" type="1" type_size="1" nature="1" inner="0" tooltip="" id="6" /><Input name="displayServices" type="1" type_size="1" nature="1" inner="0" tooltip="" id="7" /><Input name="displayOurteam" type="1" type_size="1" nature="1" inner="0" tooltip="" id="8" /><Input name="displayFeedback" type="1" type_size="1" nature="1" inner="0" tooltip="" id="9" /><Input name="displayGoodbye" type="1" type_size="1" nature="1" inner="0" tooltip="" id="10" /><Input name="displayHelp" type="1" type_size="1" nature="1" inner="0" tooltip="" id="11" /><Input name="displayTest" type="1" type_size="1" nature="1" inner="0" tooltip="" id="12" /><Input name="displayExePhy" type="1" type_size="1" nature="1" inner="0" tooltip="" id="13" /><Input name="getAgeTest1" type="1" type_size="1" nature="1" inner="0" tooltip="" id="14" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="15" /><Output name="onMenu" type="1" type_size="1" nature="2" inner="0" tooltip="" id="16" /><Output name="onAboutus" type="1" type_size="1" nature="2" inner="0" tooltip="" id="17" /><Output name="onNavigate" type="1" type_size="1" nature="2" inner="0" tooltip="" id="18" /><Output name="onServices" type="1" type_size="1" nature="2" inner="0" tooltip="" id="19" /><Output name="onOurteam" type="1" type_size="1" nature="2" inner="0" tooltip="" id="20" /><Output name="onFeedback" type="1" type_size="1" nature="2" inner="0" tooltip="" id="21" /><Output name="onGoodbye" type="1" type_size="1" nature="2" inner="0" tooltip="" id="22" /><Output name="onHelp" type="1" type_size="1" nature="2" inner="0" tooltip="" id="23" /><Output name="testing" type="1" type_size="1" nature="2" inner="0" tooltip="" id="24" /><Output name="onExePhy" type="1" type_size="1" nature="2" inner="0" tooltip="" id="25" /><Output name="onAgeTest1" type="1" type_size="1" nature="2" inner="0" tooltip="" id="26" /><Output name="onChild" type="1" type_size="1" nature="2" inner="0" tooltip="" id="27" /></Box><Box name="exploreMap" id="17" localization="8" tooltip="This box contains a basic python script and can be used to create any python script box you would like.&#x0A;&#x0A;To edit its script, double-click on it." x="407" y="756"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[import qi
import sys
import numpy

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)


    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        if __name__ == "__main__":
                session = qi.Session()
                try:
                    session.connect("tcp://192.168.0.160:9559")
                except RuntimeError:
                    print("Can't connect to Naoqi")
                    sys.exit(1)
                self.main(session)




    def onInput_onStop(self):
        #self.asr_service.pause(True)
        #self.asr_service.unsubscribe("my_box")
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box

    def main(self, session):
        # Get the services ALNavigation and ALMotion.
        navigation_service = session.service("ALNavigation")
        tts = session.service("ALTextToSpeech")

         # Explore the environment, in a radius of 2 m.
#        radius = 5.0
#        error_code = navigation_service.explore(radius)
#        if error_code != 0:
#            print "Exploration failed."
#            return
#        # Saves the exploration on disk
#        map_path = navigation_service.saveExploration()
#        print "Exploration saved at path: \"" + map_path + "\""

        navigation_service.stopLocalization()

        # Load the saved map
        map_path = "/home/nao/.local/share/Explorer/2023-05-09T032509.353Z.explo"


        navigation_service.loadExploration(map_path)

        metrical_map = navigation_service.getMetricalMap()

        #print("aaaaaaaaaaaa")
        print(metrical_map)

        navigation_service.startLocalization()
        print("Pepper's location")
        pepperPosition = navigation_service.getRobotPositionInMap()
        print(pepperPosition)
        origin = pepperPosition
        pointA = [1.0,1.0,0.0]
        pointB = [2.0,1.0,1.0]
        navigation_service.navigateToInMap(pointA)
        print("went to point A")
        tts.say("I'm at A!")
        print(pepperPosition)

        tts.say("I'm going to B!")
        navigation_service.navigateToInMap(pointB)
        print("went to point B")
        tts.say("I'm at B!")


        tts.say("I'm going to origin!")
        navigation_service.navigateToInMap(origin)
        print("went to point origin")
        tts.say("I'm at origin!")

        navigation_service.stopLocalization()
        print("done")]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Box name="Diagram (1)" id="19" localization="8" tooltip="This box is empty and should be used to create any box diagram you would like.&#x0A;&#x0A;To edit its diagram, double-click on it." x="847" y="710"><bitmap>media/images/box/box-diagram.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Input name="startGetAge" type="1" type_size="1" nature="1" inner="0" tooltip="" id="4" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="5" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram><Box name="Basic Awareness" id="10" localization="8" tooltip="This box is an interface to the module ALBasicAwareness.&#x0A;&#x0A;It is a simple way to make the robot establish and keep eye contact with people.&#x0A;&#x0A;V1.1.0" x="385" y="369"><bitmap>media/images/box/tracker/basicawareness.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        try:
            self.awareness = ALProxy('ALBasicAwareness')
        except Exception as e:
            self.awareness = None
            self.logger.error(e)

        self.memory = ALProxy('ALMemory')

        self.isRunning = False
        self.trackedHuman = -1

        import threading
        self.subscribingLock = threading.Lock()

        self.BIND_PYTHON(self.getName(), "setParameter")


    def onUnload(self):
        if self.isRunning:
            if self.awareness:
                self.awareness.stopAwareness()
                self.setALMemorySubscription(False)
            self.isRunning = False


    def onInput_onStart(self):
        if self.isRunning:
            return # already running, nothing to do

        self.isRunning = True
        self.trackedHuman = -1
        if self.awareness:
            self.awareness.setEngagementMode(self.getParameter('Engagement Mode'))
            self.awareness.setTrackingMode(self.getParameter('Tracking Mode'))
            self.awareness.setStimulusDetectionEnabled('Sound', self.getParameter('Sound Stimulus'))
            self.awareness.setStimulusDetectionEnabled('Movement', self.getParameter('Movement Stimulus'))
            self.awareness.setStimulusDetectionEnabled('People', self.getParameter('People Stimulus'))
            self.awareness.setStimulusDetectionEnabled('Touch', self.getParameter('Touch Stimulus'))
            self.setALMemorySubscription(True)
            self.awareness.startAwareness()



    def onInput_onStop(self):
        if not self.isRunning:
            return # already stopped, nothing to do

        self.onUnload()
        self.onStopped()


    def setParameter(self, parameterName, newValue):
        GeneratedClass.setParameter(self, parameterName, newValue)

        if self.awareness:
            if parameterName == 'Sound Stimulus':
                self.awareness.setStimulusDetectionEnabled('Sound', newValue)
            elif parameterName == 'Movement Stimulus':
                self.awareness.setStimulusDetectionEnabled('Movement', newValue)
            elif parameterName == 'People Stimulus':
                self.awareness.setStimulusDetectionEnabled('People', newValue)
            elif parameterName == 'Touch Stimulus':
                self.awareness.setStimulusDetectionEnabled('Touch', newValue)


    # callbacks for ALBasicAwareness events
    def onStimulusDetected(self, eventName, stimulusName, subscriberIdentifier):
        self.StimulusDetected(stimulusName)

    def onHumanTracked(self, eventName, humanID, subscriberIdentifier):
        self.trackedHuman = humanID
        self.HumanTracked(humanID)

    def onHumanLost(self, eventName, subscriberIdentifier):
        self.HumanLost(self.trackedHuman)
        self.trackedHuman = -1


    def setALMemorySubscription(self, subscribe):
        self.subscribingLock.acquire()
        if subscribe:
            self.memory.subscribeToEvent('ALBasicAwareness/StimulusDetected', self.getName(), 'onStimulusDetected')
            self.memory.subscribeToEvent('ALBasicAwareness/HumanTracked', self.getName(), 'onHumanTracked')
            self.memory.subscribeToEvent('ALBasicAwareness/HumanLost', self.getName(), 'onHumanLost')
        else:
            self.memory.unsubscribeToEvent('ALBasicAwareness/StimulusDetected', self.getName())
            self.memory.unsubscribeToEvent('ALBasicAwareness/HumanTracked', self.getName())
            self.memory.unsubscribeToEvent('ALBasicAwareness/HumanLost', self.getName())

        self.subscribingLock.release()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Starts the Basic Awareness with the given Engagement and Tracking mode parameters, using the given stimuli." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stops the Basic Awareness." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Output name="StimulusDetected" type="3" type_size="1" nature="2" inner="0" tooltip="This output is stimulated when BasicAwareness detects a stimulus amongst the tracked stimulus.&#x0A;&#x0A;The output data is the stimulus&apos; name." id="5" /><Output name="HumanTracked" type="2" type_size="1" nature="2" inner="0" tooltip="This output is triggered when ALBasicAwareness detects a stimulus that is confirmed to be a human.&#x0A;&#x0A;The output data is the ID corresponding to the tracked human. It is shared with PeoplePerception and can be used there. This output is triggered with -1 if ALBasicAwareness tried to detect a human but failed." id="6" /><Output name="HumanLost" type="2" type_size="1" nature="2" inner="0" tooltip="This output is triggered when the human currently tracked is lost.&#x0A;&#x0A; The output data is the ID corresponding to the lost human. It can be reused in PeoplePerception." id="7" /><Parameter name="Engagement Mode" inherits_from_parent="0" content_type="3" value="FullyEngaged" default_value="Unengaged" custom_choice="0" tooltip='The engagement mode specifies how &quot;focused&quot; the robot is on the engaged person.' id="8"><Choice value="Unengaged" /><Choice value="FullyEngaged" /><Choice value="SemiEngaged" /></Parameter><Parameter name="Tracking Mode" inherits_from_parent="0" content_type="3" value="Head" default_value="Head" custom_choice="0" tooltip="The tracking mode describes how the robot keeps eye contact with an engaged person." id="9"><Choice value="Head" /><Choice value="BodyRotation" /><Choice value="WholeBody" /></Parameter><Parameter name="Sound Stimulus" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="" id="10" /><Parameter name="Movement Stimulus" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="" id="11" /><Parameter name="People Stimulus" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="" id="12" /><Parameter name="Touch Stimulus" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="" id="13" /></Box><Box name="Get Age" id="1" localization="8" tooltip="This box returns the age of the person in front of the robot.&#x0A;The detection fails when there are more or less than one person in front of the robot or when the timeout is exceeded.&#x0A;&#x0A;It is possible to set up the Confidence Threshold and the Timeout parameters for this box. " x="899" y="388"><bitmap>media/images/box/interaction/age.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        try:
            self.faceC = ALProxy("ALFaceCharacteristics")
        except Exception as e:
            raise RuntimeError(str(e) + "Make sure you're not connected to a virtual robot." )
        self.confidence = self.getParameter("Confidence Threshold")
        self.age = 0
        self.counter = 0
        self.bIsRunning = False
        self.delayed = []
        self.errorMes = ""

    def onUnload(self):
        self.counter = 0
        self.age = 0
        self.bIsRunning = False
        self.cancelDelays()

    def onInput_onStart(self):
        try:
            #start timer
            import qi
            import functools
            delay_future = qi.async(self.onTimeout, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))
            self.delayed.append(delay_future)
            bound_clean = functools.partial(self.cleanDelay, delay_future)
            delay_future.addCallback(bound_clean)

            self.bIsRunning = True
            while self.bIsRunning:
                if self.counter < 4:
                    try:
                        #identify user
                        ids = ALMemory.getData("PeoplePerception/PeopleList")
                        if len(ids) == 0:
                            self.errorMes = "No face detected"
                            self.onUnload()
                        elif len(ids) > 1:
                            self.errorMes = "Multiple faces detected"
                            self.onUnload()
                        else:
                            #analyze age properties
                            self.faceC.analyzeFaceCharacteristics(ids[0])
                            time.sleep(0.1)
                            value = ALMemory.getData("PeoplePerception/Person/"+str(ids[0])+"/AgeProperties")
                            if value[1] > self.confidence:
                                self.age += value[0]
                                self.counter += 1
                    except:
                        ids = []
                else:
                    #calculate mean value
                    self.age /= 4
                    self.onStopped(int(self.age))
                    self.onUnload()
                    return
            raise RuntimeError(self.errorMes)
        except Exception as e:
            raise RuntimeError(str(e))
            self.onUnload()

    def onTimeout(self):
        self.errorMes = "Timeout"
        self.onUnload()

    def cleanDelay(self, fut, fut_ref):
        self.delayed.remove(fut)

    def cancelDelays(self):
        cancel_list = list(self.delayed)
        for d in cancel_list:
            d.cancel()

    def onInput_onStop(self):
        self.onUnload()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="2" type_size="1" nature="1" inner="0" tooltip="Returns a number between 0 and 75 indicating the age of the person in front of the robot.&#x0A;&#x0A;Tip:&#x0A;Connect this output to If box to compare the age with a defined value" id="4" /><Output name="onError" type="3" type_size="1" nature="1" inner="0" tooltip='Triggered when age detection failed. &#x0A;Possible error messages:&#x0A;- &quot;No face detected&quot;&#x0A;- &quot;Multiple faces detected&quot;&#x0A;- &quot;Timeout&quot;' id="5" /><Parameter name="Confidence Threshold" inherits_from_parent="0" content_type="2" value="0" default_value="0.6" min="0" max="1" tooltip="Set the confidence threshold for the age detection." id="6" /><Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="1" default_value="5" min="1" max="60" tooltip="" id="7" /></Box><Box name="Say Text" id="2" localization="8" tooltip="Say the text received on its input." x="1078" y="385"><bitmap>media/images/box/interaction/say.png</bitmap><script language="4"><content><![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += "You look like you are %s years old" % str(p)
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence))
            self.ids.append(id)
            self.tts.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" /><Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" /><Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" /><Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" /><Resource name="Speech" type="Lock" timeout="0" /></Box><Box name="Say Text (1)" id="13" localization="8" tooltip="Say the text received on its input." x="1088" y="600"><bitmap>media/images/box/interaction/say.png</bitmap><script language="4"><content><![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence))
            self.ids.append(id)
            self.tts.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" /><Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" /><Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" /><Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="95" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" /><Resource name="Speech" type="Lock" timeout="0" /></Box><Box name="Text Edit" id="14" localization="8" tooltip="Send the text you entered when the input is stimulated." plugin="textedit_plugin" x="778" y="585"><bitmap>media/images/box/interaction/vocabulary.png</bitmap><script language="4"><content><![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("I see you, now let me think for a while")]]></content></script><pluginContent><text><![CDATA[I see you, now let me think for a while]]></text></pluginContent><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" /><Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" /></Box><Box name="Say Text (2)" id="3" localization="8" tooltip="Say the text received on its input." x="1224" y="169"><bitmap>media/images/box/interaction/say.png</bitmap><script language="4"><content><![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence))
            self.ids.append(id)
            self.tts.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" /><Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" /><Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" /><Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="95" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" /><Resource name="Speech" type="Lock" timeout="0" /></Box><Box name="Text Edit (1)" id="4" localization="8" tooltip="Send the text you entered when the input is stimulated." plugin="textedit_plugin" x="914" y="154"><bitmap>media/images/box/interaction/vocabulary.png</bitmap><script language="4"><content><![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("Oops, something went wrong let me try again")]]></content></script><pluginContent><text><![CDATA[Oops, something went wrong let me try again]]></text></pluginContent><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" /><Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" /></Box><Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="4" /><Link inputowner="13" indexofinput="2" outputowner="14" indexofoutput="3" /><Link inputowner="14" indexofinput="2" outputowner="10" indexofoutput="6" /><Link inputowner="1" indexofinput="2" outputowner="13" indexofoutput="4" /><Link inputowner="3" indexofinput="2" outputowner="4" indexofoutput="3" /><Link inputowner="4" indexofinput="2" outputowner="1" indexofoutput="5" /><Link inputowner="10" indexofinput="2" outputowner="3" indexofoutput="4" /><Link inputowner="10" indexofinput="2" outputowner="0" indexofoutput="2" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline></Box><Box name="Diagram" id="6" localization="8" tooltip="This box is empty and should be used to create any box diagram you would like.&#x0A;&#x0A;To edit its diagram, double-click on it." x="1315" y="921"><bitmap>media/images/box/box-diagram.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Input name="onChildren" type="1" type_size="1" nature="1" inner="0" tooltip="" id="4" /><Input name="onNDIS" type="1" type_size="1" nature="1" inner="0" tooltip="" id="5" /><Input name="onHealthy" type="1" type_size="1" nature="1" inner="0" tooltip="" id="6" /><Input name="onRehab" type="1" type_size="1" nature="1" inner="0" tooltip="" id="7" /><Input name="onSports" type="1" type_size="1" nature="1" inner="0" tooltip="" id="8" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="9" /><Output name="displayChildren" type="1" type_size="1" nature="2" inner="0" tooltip="" id="10" /><Output name="displayNDIS" type="1" type_size="1" nature="2" inner="0" tooltip="" id="11" /><Output name="displayHealthy" type="1" type_size="1" nature="2" inner="0" tooltip="" id="12" /><Output name="displayRehab" type="1" type_size="1" nature="2" inner="0" tooltip="" id="13" /><Output name="displaySports" type="1" type_size="1" nature="2" inner="0" tooltip="" id="14" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram><Box name="Children" id="2" localization="8" tooltip="" x="262" y="42"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)



    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        #self.onStopped() #activate the output of the box
        uid = self.packageUid()
        ip = '192.168.0.160'
        url = 'http://' + ip + '/apps/' + uid + '/pages/childrensHealth.html'
        self.session().service('ALTabletService').loadUrl(url)
        self.session().service('ALTabletService').showWebview()

        #self.asr_service.subscribe("my_box")
        #self.asr_service.pause(False)

    def onInput_onStop(self):
        #self.asr_service.pause(True)
        #self.asr_service.unsubscribe("my_box")
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box





#    def onWordRecognized(self, event):
#        if event == "menu":
#            # Load page one
#            uid = self.packageUid()
#            #self.session().service('ALTabletService').loadApplication(uid)

#            # method2: use loadUrl
#            #ip = self.session().service('ALTabletService').getRobotIp()
#            ip = '192.168.0.160'
#            url = 'http://' + ip + '/apps/' + uid + '/pages/menu.html'
#            self.session().service('ALTabletService').loadUrl(url)

#            # Show the loaded page
#            self.session().service('ALTabletService').showWebview()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Box name="NDIS" id="3" localization="8" tooltip="" x="255" y="163"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)



    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        #self.onStopped() #activate the output of the box
        uid = self.packageUid()
        ip = '192.168.0.160'
        url = 'http://' + ip + '/apps/' + uid + '/pages/childrensHealth.html'
        self.session().service('ALTabletService').loadUrl(url)
        self.session().service('ALTabletService').showWebview()

        #self.asr_service.subscribe("my_box")
        #self.asr_service.pause(False)

    def onInput_onStop(self):
        #self.asr_service.pause(True)
        #self.asr_service.unsubscribe("my_box")
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box





#    def onWordRecognized(self, event):
#        if event == "menu":
#            # Load page one
#            uid = self.packageUid()
#            #self.session().service('ALTabletService').loadApplication(uid)

#            # method2: use loadUrl
#            #ip = self.session().service('ALTabletService').getRobotIp()
#            ip = '192.168.0.160'
#            url = 'http://' + ip + '/apps/' + uid + '/pages/menu.html'
#            self.session().service('ALTabletService').loadUrl(url)

#            # Show the loaded page
#            self.session().service('ALTabletService').showWebview()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Box name="Healthy" id="6" localization="8" tooltip="" x="258" y="264"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)



    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        #self.onStopped() #activate the output of the box
        uid = self.packageUid()
        ip = '192.168.0.160'
        url = 'http://' + ip + '/apps/' + uid + '/pages/childrensHealth.html'
        self.session().service('ALTabletService').loadUrl(url)
        self.session().service('ALTabletService').showWebview()

        #self.asr_service.subscribe("my_box")
        #self.asr_service.pause(False)

    def onInput_onStop(self):
        #self.asr_service.pause(True)
        #self.asr_service.unsubscribe("my_box")
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box





#    def onWordRecognized(self, event):
#        if event == "menu":
#            # Load page one
#            uid = self.packageUid()
#            #self.session().service('ALTabletService').loadApplication(uid)

#            # method2: use loadUrl
#            #ip = self.session().service('ALTabletService').getRobotIp()
#            ip = '192.168.0.160'
#            url = 'http://' + ip + '/apps/' + uid + '/pages/menu.html'
#            self.session().service('ALTabletService').loadUrl(url)

#            # Show the loaded page
#            self.session().service('ALTabletService').showWebview()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Box name="Sports" id="7" localization="8" tooltip="" x="261" y="393"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)



    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        #self.onStopped() #activate the output of the box
        uid = self.packageUid()
        ip = '192.168.0.160'
        url = 'http://' + ip + '/apps/' + uid + '/pages/childrensHealth.html'
        self.session().service('ALTabletService').loadUrl(url)
        self.session().service('ALTabletService').showWebview()

        #self.asr_service.subscribe("my_box")
        #self.asr_service.pause(False)

    def onInput_onStop(self):
        #self.asr_service.pause(True)
        #self.asr_service.unsubscribe("my_box")
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box





#    def onWordRecognized(self, event):
#        if event == "menu":
#            # Load page one
#            uid = self.packageUid()
#            #self.session().service('ALTabletService').loadApplication(uid)

#            # method2: use loadUrl
#            #ip = self.session().service('ALTabletService').getRobotIp()
#            ip = '192.168.0.160'
#            url = 'http://' + ip + '/apps/' + uid + '/pages/menu.html'
#            self.session().service('ALTabletService').loadUrl(url)

#            # Show the loaded page
#            self.session().service('ALTabletService').showWebview()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="4" /><Link inputowner="0" indexofinput="10" outputowner="2" indexofoutput="4" /><Link inputowner="3" indexofinput="2" outputowner="0" indexofoutput="5" /><Link inputowner="0" indexofinput="11" outputowner="3" indexofoutput="4" /><Link inputowner="6" indexofinput="2" outputowner="0" indexofoutput="6" /><Link inputowner="0" indexofinput="12" outputowner="6" indexofoutput="4" /><Link inputowner="7" indexofinput="2" outputowner="0" indexofoutput="8" /><Link inputowner="0" indexofinput="14" outputowner="7" indexofoutput="4" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline></Box><Box name="Pages" id="16" localization="8" tooltip="This box is empty and should be used to create any box diagram you would like.&#x0A;&#x0A;To edit its diagram, double-click on it." x="826" y="107"><bitmap>media/images/box/box-diagram.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Input name="onMenu" type="1" type_size="1" nature="2" inner="0" tooltip="" id="4" /><Input name="onAboutUs" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" /><Input name="onNavigate" type="1" type_size="1" nature="2" inner="0" tooltip="" id="6" /><Input name="onService" type="1" type_size="1" nature="2" inner="0" tooltip="" id="7" /><Input name="onOurTeam" type="1" type_size="1" nature="2" inner="0" tooltip="" id="8" /><Input name="onFeedback" type="1" type_size="1" nature="2" inner="0" tooltip="" id="9" /><Input name="onHelp" type="1" type_size="1" nature="2" inner="0" tooltip="" id="10" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="11" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram scale="84.0896"><Box name="aboutUs" id="2" localization="8" tooltip="This box is empty and should be used to create any box diagram you would like.&#x0A;&#x0A;To edit its diagram, double-click on it." x="565" y="119"><bitmap>media/images/box/box-diagram.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram><Box name="Disable Listening" id="4" localization="8" tooltip="" x="249" y="177"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        als = ALProxy("ALSpeechRecognition")
        als.pause(True)
        self.onStopped()

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Box name="Enable Listening" id="5" localization="8" tooltip="" x="841" y="123"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        self.logger.info("RUNNING ENABLE LISTEN")
        als = ALProxy("ALSpeechRecognition")
        als.pause(False)
        self.onStopped() #activate the output of the box

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Box name="Aboutus" id="7" localization="8" tooltip="" x="494" y="62"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)



    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        #self.onStopped() #activate the output of the box

        uid = self.packageUid()
        ip = '192.168.0.160'
        url = 'http://' + ip + '/apps/' + uid + '/pages/aboutus.html'
        self.session().service('ALTabletService').loadUrl(url)
        self.session().service('ALTabletService').showWebview()

        #self.asr_service.subscribe("my_box")
        #self.asr_service.pause(False)

    def onInput_onStop(self):
        #self.asr_service.pause(True)
        #self.asr_service.unsubscribe("my_box")
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box





#    def onWordRecognized(self, event):
#        if event == "menu":
#            # Load page one
#            uid = self.packageUid()
#            #self.session().service('ALTabletService').loadApplication(uid)

#            # method2: use loadUrl
#            #ip = self.session().service('ALTabletService').getRobotIp()
#            ip = '192.168.0.160'
#            url = 'http://' + ip + '/apps/' + uid + '/pages/menu.html'
#            self.session().service('ALTabletService').loadUrl(url)

#            # Show the loaded page
#            self.session().service('ALTabletService').showWebview()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Link inputowner="4" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="0" indexofinput="4" outputowner="5" indexofoutput="4" /><Link inputowner="7" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="5" indexofinput="2" outputowner="7" indexofoutput="4" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline></Box><Box name="navigate" id="7" localization="8" tooltip="This box is empty and should be used to create any box diagram you would like.&#x0A;&#x0A;To edit its diagram, double-click on it." x="571" y="247"><bitmap>media/images/box/box-diagram.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram><Box name="Disable Listening" id="4" localization="8" tooltip="" x="249" y="177"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        als = ALProxy("ALSpeechRecognition")
        als.pause(True)
        self.onStopped()

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Box name="Enable Listening" id="5" localization="8" tooltip="" x="841" y="123"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        self.logger.info("RUNNING ENABLE LISTEN")
        als = ALProxy("ALSpeechRecognition")
        als.pause(False)
        self.onStopped() #activate the output of the box

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Box name="Navigate" id="8" localization="8" tooltip="" x="515" y="60"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)



    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        #self.onStopped() #activate the output of the box

        uid = self.packageUid()
        ip = '192.168.0.160'
        url = 'http://' + ip + '/apps/' + uid + '/pages/navigate.html'
        self.session().service('ALTabletService').loadUrl(url)
        self.session().service('ALTabletService').showWebview()

        #self.asr_service.subscribe("my_box")
        #self.asr_service.pause(False)

    def onInput_onStop(self):
        #self.asr_service.pause(True)
        #self.asr_service.unsubscribe("my_box")
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box





#    def onWordRecognized(self, event):
#        if event == "menu":
#            # Load page one
#            uid = self.packageUid()
#            #self.session().service('ALTabletService').loadApplication(uid)

#            # method2: use loadUrl
#            #ip = self.session().service('ALTabletService').getRobotIp()
#            ip = '192.168.0.160'
#            url = 'http://' + ip + '/apps/' + uid + '/pages/menu.html'
#            self.session().service('ALTabletService').loadUrl(url)

#            # Show the loaded page
#            self.session().service('ALTabletService').showWebview()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Link inputowner="4" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="0" indexofinput="4" outputowner="5" indexofoutput="4" /><Link inputowner="8" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="5" indexofinput="2" outputowner="8" indexofoutput="4" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline></Box><Box name="services" id="8" localization="8" tooltip="This box is empty and should be used to create any box diagram you would like.&#x0A;&#x0A;To edit its diagram, double-click on it." x="575" y="364"><bitmap>media/images/box/box-diagram.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram><Box name="Disable Listening" id="4" localization="8" tooltip="" x="121" y="394"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        als = ALProxy("ALSpeechRecognition")
        als.pause(True)
        self.onStopped()

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Box name="Enable Listening" id="5" localization="8" tooltip="" x="730" y="47"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        self.logger.info("RUNNING ENABLE LISTEN")
        als = ALProxy("ALSpeechRecognition")
        als.pause(False)
        self.onStopped() #activate the output of the box

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Box name="Services" id="9" localization="8" tooltip="" x="450" y="75"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)



    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        #self.onStopped() #activate the output of the box
        uid = self.packageUid()
        ip = '192.168.0.160'
        url = 'http://' + ip + '/apps/' + uid + '/pages/services.html'
        self.session().service('ALTabletService').loadUrl(url)
        self.session().service('ALTabletService').showWebview()

        #self.asr_service.subscribe("my_box")
        #self.asr_service.pause(False)

    def onInput_onStop(self):
        #self.asr_service.pause(True)
        #self.asr_service.unsubscribe("my_box")
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box





#    def onWordRecognized(self, event):
#        if event == "menu":
#            # Load page one
#            uid = self.packageUid()
#            #self.session().service('ALTabletService').loadApplication(uid)

#            # method2: use loadUrl
#            #ip = self.session().service('ALTabletService').getRobotIp()
#            ip = '192.168.0.160'
#            url = 'http://' + ip + '/apps/' + uid + '/pages/menu.html'
#            self.session().service('ALTabletService').loadUrl(url)

#            # Show the loaded page
#            self.session().service('ALTabletService').showWebview()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Link inputowner="4" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="0" indexofinput="4" outputowner="5" indexofoutput="4" /><Link inputowner="9" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="5" indexofinput="2" outputowner="9" indexofoutput="4" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline></Box><Box name="ourTeam" id="9" localization="8" tooltip="This box is empty and should be used to create any box diagram you would like.&#x0A;&#x0A;To edit its diagram, double-click on it." x="574" y="480"><bitmap>media/images/box/box-diagram.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram><Box name="Disable Listening" id="4" localization="8" tooltip="" x="249" y="177"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        als = ALProxy("ALSpeechRecognition")
        als.pause(True)
        self.onStopped()

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Box name="Enable Listening" id="5" localization="8" tooltip="" x="841" y="123"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        self.logger.info("RUNNING ENABLE LISTEN")
        als = ALProxy("ALSpeechRecognition")
        als.pause(False)
        self.onStopped() #activate the output of the box

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Box name="OurTeam" id="10" localization="8" tooltip="" x="578" y="73"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)



    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        #self.onStopped() #activate the output of the box

        uid = self.packageUid()
        ip = '192.168.0.160'
        url = 'http://' + ip + '/apps/' + uid + '/pages/ourteam.html'
        self.session().service('ALTabletService').loadUrl(url)
        self.session().service('ALTabletService').showWebview()

        #self.asr_service.subscribe("my_box")
        #self.asr_service.pause(False)

    def onInput_onStop(self):
        #self.asr_service.pause(True)
        #self.asr_service.unsubscribe("my_box")
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box





#    def onWordRecognized(self, event):
#        if event == "menu":
#            # Load page one
#            uid = self.packageUid()
#            #self.session().service('ALTabletService').loadApplication(uid)

#            # method2: use loadUrl
#            #ip = self.session().service('ALTabletService').getRobotIp()
#            ip = '192.168.0.160'
#            url = 'http://' + ip + '/apps/' + uid + '/pages/menu.html'
#            self.session().service('ALTabletService').loadUrl(url)

#            # Show the loaded page
#            self.session().service('ALTabletService').showWebview()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Link inputowner="4" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="0" indexofinput="4" outputowner="5" indexofoutput="4" /><Link inputowner="10" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="5" indexofinput="2" outputowner="10" indexofoutput="4" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline></Box><Box name="feedback" id="10" localization="8" tooltip="This box is empty and should be used to create any box diagram you would like.&#x0A;&#x0A;To edit its diagram, double-click on it." x="572" y="596"><bitmap>media/images/box/box-diagram.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram><Box name="Disable Listening" id="4" localization="8" tooltip="" x="249" y="177"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        als = ALProxy("ALSpeechRecognition")
        als.pause(True)
        self.onStopped()

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Box name="Enable Listening" id="5" localization="8" tooltip="" x="841" y="123"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        self.logger.info("RUNNING ENABLE LISTEN")
        als = ALProxy("ALSpeechRecognition")
        als.pause(False)
        self.onStopped() #activate the output of the box

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Box name="Feedback" id="11" localization="8" tooltip="" x="481" y="99"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        #self.onStopped() #activate the output of the box

        uid = self.packageUid()
        ip = '192.168.0.160'
        url = 'http://' + ip + '/apps/' + uid + '/pages/feedback.html'
        self.session().service('ALTabletService').loadUrl(url)
        self.session().service('ALTabletService').showWebview()

        #self.asr_service.subscribe("my_box")
        #self.asr_service.pause(False)

    def onInput_onStop(self):
        #self.asr_service.pause(True)
        #self.asr_service.unsubscribe("my_box")
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Output name="Rating1" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" /></Box><Link inputowner="4" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="0" indexofinput="4" outputowner="5" indexofoutput="4" /><Link inputowner="11" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="5" indexofinput="2" outputowner="11" indexofoutput="4" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline></Box><Box name="help" id="11" localization="8" tooltip="This box is empty and should be used to create any box diagram you would like.&#x0A;&#x0A;To edit its diagram, double-click on it." x="566" y="714"><bitmap>media/images/box/box-diagram.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram><Box name="Disable Listening" id="4" localization="8" tooltip="" x="249" y="177"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        als = ALProxy("ALSpeechRecognition")
        als.pause(True)
        self.onStopped()

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Box name="Enable Listening" id="5" localization="8" tooltip="" x="841" y="123"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        self.logger.info("RUNNING ENABLE LISTEN")
        als = ALProxy("ALSpeechRecognition")
        als.pause(False)
        self.onStopped() #activate the output of the box

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Box name="Help" id="6" localization="8" tooltip="" x="445" y="59"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        #self.onStopped() #activate the output of the box

        uid = self.packageUid()
        ip = '192.168.0.160'
        url = 'http://' + ip + '/apps/' + uid + '/pages/dialog.html'
        self.session().service('ALTabletService').loadUrl(url)
        self.session().service('ALTabletService').showWebview()

        #self.asr_service.subscribe("my_box")
        #self.asr_service.pause(False)

    def onInput_onStop(self):
        #self.asr_service.pause(True)
        #self.asr_service.unsubscribe("my_box")
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Output name="Rating1" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" /></Box><Link inputowner="4" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="0" indexofinput="4" outputowner="5" indexofoutput="4" /><Link inputowner="6" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="5" indexofinput="2" outputowner="6" indexofoutput="4" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline></Box><Box name="menu" id="4" localization="8" tooltip="This box is empty and should be used to create any box diagram you would like.&#x0A;&#x0A;To edit its diagram, double-click on it." x="570" y="4"><bitmap>media/images/box/box-diagram.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram><Box name="Enable Listening" id="5" localization="8" tooltip="" x="841" y="123"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        self.logger.info("RUNNING ENABLE LISTEN")
        als = ALProxy("ALSpeechRecognition")
        als.pause(False)
        self.onStopped() #activate the output of the box

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Box name="Menu" id="2" localization="8" tooltip="" x="549" y="68"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)



    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        #self.onStopped() #activate the output of the box

        uid = self.packageUid()
        ip = '192.168.0.160'
        url = 'http://' + ip + '/apps/' + uid + '/pages/menu.html'
        self.session().service('ALTabletService').loadUrl(url)
        self.session().service('ALTabletService').showWebview()

        #self.asr_service.subscribe("my_box")
        #self.asr_service.pause(False)

    def onInput_onStop(self):
        #self.asr_service.pause(True)
        #self.asr_service.unsubscribe("my_box")
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box





#    def onWordRecognized(self, event):
#        if event == "menu":
#            # Load page one
#            uid = self.packageUid()
#            #self.session().service('ALTabletService').loadApplication(uid)

#            # method2: use loadUrl
#            #ip = self.session().service('ALTabletService').getRobotIp()
#            ip = '192.168.0.160'
#            url = 'http://' + ip + '/apps/' + uid + '/pages/menu.html'
#            self.session().service('ALTabletService').loadUrl(url)

#            # Show the loaded page
#            self.session().service('ALTabletService').showWebview()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="5" indexofinput="2" outputowner="2" indexofoutput="4" /><Link inputowner="0" indexofinput="4" outputowner="5" indexofoutput="4" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline></Box><Box name="Menu" id="1" localization="8" tooltip="" x="1150" y="895"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)



    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        #self.onStopped() #activate the output of the box

        uid = self.packageUid()
        ip = '192.168.0.160'
        url = 'http://' + ip + '/apps/' + uid + '/pages/menu.html'
        self.session().service('ALTabletService').loadUrl(url)
        self.session().service('ALTabletService').showWebview()

        #self.asr_service.subscribe("my_box")
        #self.asr_service.pause(False)

    def onInput_onStop(self):
        #self.asr_service.pause(True)
        #self.asr_service.unsubscribe("my_box")
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box





#    def onWordRecognized(self, event):
#        if event == "menu":
#            # Load page one
#            uid = self.packageUid()
#            #self.session().service('ALTabletService').loadApplication(uid)

#            # method2: use loadUrl
#            #ip = self.session().service('ALTabletService').getRobotIp()
#            ip = '192.168.0.160'
#            url = 'http://' + ip + '/apps/' + uid + '/pages/menu.html'
#            self.session().service('ALTabletService').loadUrl(url)

#            # Show the loaded page
#            self.session().service('ALTabletService').showWebview()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Box name="Aboutus" id="3" localization="8" tooltip="" x="1158" y="1003"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)



    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        #self.onStopped() #activate the output of the box

        uid = self.packageUid()
        ip = '192.168.0.160'
        url = 'http://' + ip + '/apps/' + uid + '/pages/aboutus.html'
        self.session().service('ALTabletService').loadUrl(url)
        self.session().service('ALTabletService').showWebview()

        #self.asr_service.subscribe("my_box")
        #self.asr_service.pause(False)

    def onInput_onStop(self):
        #self.asr_service.pause(True)
        #self.asr_service.unsubscribe("my_box")
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box





#    def onWordRecognized(self, event):
#        if event == "menu":
#            # Load page one
#            uid = self.packageUid()
#            #self.session().service('ALTabletService').loadApplication(uid)

#            # method2: use loadUrl
#            #ip = self.session().service('ALTabletService').getRobotIp()
#            ip = '192.168.0.160'
#            url = 'http://' + ip + '/apps/' + uid + '/pages/menu.html'
#            self.session().service('ALTabletService').loadUrl(url)

#            # Show the loaded page
#            self.session().service('ALTabletService').showWebview()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Box name="Navigate" id="6" localization="8" tooltip="" x="1153" y="1121"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)



    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        #self.onStopped() #activate the output of the box

        uid = self.packageUid()
        ip = '192.168.0.160'
        url = 'http://' + ip + '/apps/' + uid + '/pages/navigate.html'
        self.session().service('ALTabletService').loadUrl(url)
        self.session().service('ALTabletService').showWebview()

        #self.asr_service.subscribe("my_box")
        #self.asr_service.pause(False)

    def onInput_onStop(self):
        #self.asr_service.pause(True)
        #self.asr_service.unsubscribe("my_box")
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box





#    def onWordRecognized(self, event):
#        if event == "menu":
#            # Load page one
#            uid = self.packageUid()
#            #self.session().service('ALTabletService').loadApplication(uid)

#            # method2: use loadUrl
#            #ip = self.session().service('ALTabletService').getRobotIp()
#            ip = '192.168.0.160'
#            url = 'http://' + ip + '/apps/' + uid + '/pages/menu.html'
#            self.session().service('ALTabletService').loadUrl(url)

#            # Show the loaded page
#            self.session().service('ALTabletService').showWebview()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Box name="Services" id="12" localization="8" tooltip="" x="1160" y="1234"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)



    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        #self.onStopped() #activate the output of the box
        uid = self.packageUid()
        ip = '192.168.0.160'
        url = 'http://' + ip + '/apps/' + uid + '/pages/services.html'
        self.session().service('ALTabletService').loadUrl(url)
        self.session().service('ALTabletService').showWebview()

        #self.asr_service.subscribe("my_box")
        #self.asr_service.pause(False)

    def onInput_onStop(self):
        #self.asr_service.pause(True)
        #self.asr_service.unsubscribe("my_box")
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box





#    def onWordRecognized(self, event):
#        if event == "menu":
#            # Load page one
#            uid = self.packageUid()
#            #self.session().service('ALTabletService').loadApplication(uid)

#            # method2: use loadUrl
#            #ip = self.session().service('ALTabletService').getRobotIp()
#            ip = '192.168.0.160'
#            url = 'http://' + ip + '/apps/' + uid + '/pages/menu.html'
#            self.session().service('ALTabletService').loadUrl(url)

#            # Show the loaded page
#            self.session().service('ALTabletService').showWebview()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Box name="OurTeam" id="13" localization="8" tooltip="" x="1164" y="1349"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)



    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        #self.onStopped() #activate the output of the box

        uid = self.packageUid()
        ip = '192.168.0.160'
        url = 'http://' + ip + '/apps/' + uid + '/pages/ourteam.html'
        self.session().service('ALTabletService').loadUrl(url)
        self.session().service('ALTabletService').showWebview()

        #self.asr_service.subscribe("my_box")
        #self.asr_service.pause(False)

    def onInput_onStop(self):
        #self.asr_service.pause(True)
        #self.asr_service.unsubscribe("my_box")
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box





#    def onWordRecognized(self, event):
#        if event == "menu":
#            # Load page one
#            uid = self.packageUid()
#            #self.session().service('ALTabletService').loadApplication(uid)

#            # method2: use loadUrl
#            #ip = self.session().service('ALTabletService').getRobotIp()
#            ip = '192.168.0.160'
#            url = 'http://' + ip + '/apps/' + uid + '/pages/menu.html'
#            self.session().service('ALTabletService').loadUrl(url)

#            # Show the loaded page
#            self.session().service('ALTabletService').showWebview()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Box name="Feedback" id="14" localization="8" tooltip="" x="1169" y="1460"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        #self.onStopped() #activate the output of the box

        uid = self.packageUid()
        ip = '192.168.0.160'
        url = 'http://' + ip + '/apps/' + uid + '/pages/feedback.html'
        self.session().service('ALTabletService').loadUrl(url)
        self.session().service('ALTabletService').showWebview()

        #self.asr_service.subscribe("my_box")
        #self.asr_service.pause(False)

    def onInput_onStop(self):
        #self.asr_service.pause(True)
        #self.asr_service.unsubscribe("my_box")
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Output name="Rating1" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" /></Box><Box name="Help" id="15" localization="8" tooltip="" x="1159" y="1588"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        #self.onStopped() #activate the output of the box

        uid = self.packageUid()
        ip = '192.168.0.160'
        url = 'http://' + ip + '/apps/' + uid + '/pages/dialog.html'
        self.session().service('ALTabletService').loadUrl(url)
        self.session().service('ALTabletService').showWebview()

        #self.asr_service.subscribe("my_box")
        #self.asr_service.pause(False)

    def onInput_onStop(self):
        #self.asr_service.pause(True)
        #self.asr_service.unsubscribe("my_box")
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Output name="Rating1" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" /></Box><Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="5" /><Link inputowner="7" indexofinput="2" outputowner="0" indexofoutput="6" /><Link inputowner="8" indexofinput="2" outputowner="0" indexofoutput="7" /><Link inputowner="9" indexofinput="2" outputowner="0" indexofoutput="8" /><Link inputowner="10" indexofinput="2" outputowner="0" indexofoutput="9" /><Link inputowner="11" indexofinput="2" outputowner="0" indexofoutput="10" /><Link inputowner="4" indexofinput="2" outputowner="0" indexofoutput="4" /><Link inputowner="0" indexofinput="11" outputowner="7" indexofoutput="4" /><Link inputowner="0" indexofinput="11" outputowner="9" indexofoutput="4" /><Link inputowner="0" indexofinput="11" outputowner="10" indexofoutput="4" /><Link inputowner="0" indexofinput="11" outputowner="11" indexofoutput="4" /><Link inputowner="0" indexofinput="11" outputowner="2" indexofoutput="4" /><Link inputowner="0" indexofinput="11" outputowner="8" indexofoutput="4" /><Link inputowner="0" indexofinput="11" outputowner="4" indexofoutput="4" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline></Box><Box name="Gestures" id="4" localization="8" tooltip="This box is empty and should be used to create any box diagram you would like.&#x0A;&#x0A;To edit its diagram, double-click on it." x="835" y="440"><bitmap>media/images/box/box-diagram.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Input name="ByeWave" type="1" type_size="1" nature="1" inner="0" tooltip="" id="4" /><Input name="OpenArmOurTeam" type="1" type_size="1" nature="1" inner="0" tooltip="" id="5" /><Input name="OpenArmHelp" type="1" type_size="1" nature="1" inner="0" tooltip="" id="6" /><Input name="BothArmFeedback" type="1" type_size="1" nature="1" inner="0" tooltip="" id="7" /><Input name="OfferService" type="1" type_size="1" nature="1" inner="0" tooltip="" id="8" /><Input name="PointToAboutUs" type="1" type_size="1" nature="1" inner="0" tooltip="" id="9" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="10" /><Output name="ByeWaveOutput" type="1" type_size="1" nature="2" inner="0" tooltip="" id="11" /><Output name="OpenArmOurTeamOutput" type="1" type_size="1" nature="2" inner="0" tooltip="" id="12" /><Output name="OpenArmHelpOutput" type="1" type_size="1" nature="2" inner="0" tooltip="" id="13" /><Output name="BothArmFeedbackOutput" type="1" type_size="1" nature="2" inner="0" tooltip="" id="14" /><Output name="OfferServiceOutput" type="1" type_size="1" nature="2" inner="0" tooltip="" id="15" /><Output name="PointToAboutUsOutput" type="1" type_size="1" nature="2" inner="0" tooltip="" id="16" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram><Box name="OpenArmTwoOurTeam" id="19" localization="8" tooltip="ID : #01B 0017&#x0A;&#x0A;===================&#x0A;&#x0A;Tags : &#x0A;- You&#x0A;- Yourself&#x0A;- Yours&#x0A;&#x0A;===================&#x0A;&#x0A;Common dialog : No&#x0A;&#x0A;===================&#x0A;&#x0A;Start stance : Center&#x0A;End stance : Center" x="429" y="164"><bitmap>media/images/box/movement/move.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="35"><ActuatorList model=""><ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0"><Key frame="15" value="-22.9794" /><Key frame="20" value="-12.8735" /><Key frame="27" value="-40.9735" /><Key frame="33" value="-22.9794" /></ActuatorCurve><ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0"><Key frame="15" value="-9.23104" /><Key frame="27" value="-9.23104" /><Key frame="33" value="-9.23104" /></ActuatorCurve><ActuatorCurve name="value" actuator="HipPitch" mute="0" unit="0"><Key frame="22" value="-18.8768" /><Key frame="35" value="-3.46838" /></ActuatorCurve><ActuatorCurve name="value" actuator="HipRoll" mute="0" unit="0"><Key frame="22" value="-0.452734" /><Key frame="35" value="-0.452734" /></ActuatorCurve><ActuatorCurve name="value" actuator="KneePitch" mute="0" unit="0"><Key frame="22" value="10.4601" /><Key frame="35" value="2.269" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0"><Key frame="18" value="-35" /><Key frame="30" value="-60.2" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0"><Key frame="18" value="-99.3311" /><Key frame="30" value="-94" /></ActuatorCurve><ActuatorCurve name="value" actuator="LHand" mute="0" unit="1"><Key frame="18" value="0.91" /><Key frame="30" value="0.07" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0"><Key frame="18" value="111.889" /><Key frame="30" value="102.3" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0"><Key frame="18" value="16.2268" /><Key frame="30" value="4.37302" /></ActuatorCurve><ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0"><Key frame="30" value="27.8" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0"><Key frame="12" value="74.2407" /><Key frame="22" value="74.4271" /><Key frame="33" value="45.7061" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0"><Key frame="12" value="70.8015" /><Key frame="33" value="117.588" /></ActuatorCurve><ActuatorCurve name="value" actuator="RHand" mute="0" unit="1"><Key frame="12" value="0.184429" /><Key frame="22" value="0" /><Key frame="33" value="0.95" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0"><Key frame="22" value="30.1" /><Key frame="33" value="38.8506" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0"><Key frame="12" value="-31.541" /><Key frame="33" value="-39.3542" /></ActuatorCurve><ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0"><Key frame="12" value="3.41474" /><Key frame="33" value="14.0603" /></ActuatorCurve></ActuatorList></Timeline><Resource name="Standing" type="Lock" timeout="1" /><Resource name="All motors" type="Lock" timeout="1" /></Box><Box name="OpenArm1Help" id="18" localization="8" tooltip='ID : #01E 0005&#x0A;&#x0A;===================&#x0A;&#x0A;Tags : &#x0A;- Why?&#x0A;- &quot;?&quot;&#x0A;- When?&#x0A;- Where?&#x0A;&#x0A;===================&#x0A;&#x0A;Common dialog : Yes&#x0A;&#x0A;===================&#x0A;&#x0A;Start stance : LeanRight&#x0A;End stance : LeanRight' x="434" y="292"><bitmap>media/images/box/movement/move.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="40"><ActuatorList model=""><ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0"><Key frame="13" value="-10.1614" /><Key frame="19" value="-25.8641" smooth="1" symmetrical="1"><Tangent side="left" interpType="bezier" abscissaParam="-2.91739" ordinateParam="0.000291739" /><Tangent side="right" interpType="bezier" abscissaParam="3.40362" ordinateParam="-0.000340362" /></Key><Key frame="26" value="-12.54" /><Key frame="39" value="-16.6654" /></ActuatorCurve><ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0"><Key frame="13" value="1.31597" /><Key frame="26" value="3.51326" /><Key frame="39" value="1.75543" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0"><Key frame="15" value="-30.4081" /><Key frame="27" value="-42.8888" /><Key frame="38" value="-31.287" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0"><Key frame="15" value="-79.0171" /><Key frame="27" value="-108.461" /><Key frame="38" value="-74.0951" /></ActuatorCurve><ActuatorCurve name="value" actuator="LHand" mute="0" unit="1"><Key frame="15" value="0.18" /><Key frame="27" value="0.56" /><Key frame="38" value="0.3068" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0"><Key frame="15" value="79.6275" /><Key frame="27" value="75.8482" /><Key frame="38" value="81.2974" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0"><Key frame="15" value="13.8124" /><Key frame="27" value="16.9765" /><Key frame="38" value="10.912" /></ActuatorCurve><ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0"><Key frame="15" value="-12.2194" /><Key frame="27" value="-66.888" /><Key frame="38" value="-6.06693" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0"><Key frame="14" value="40.1689" /><Key frame="25" value="56.1652" /><Key frame="40" value="42.8936" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0"><Key frame="14" value="81.5611" /><Key frame="25" value="111.444" /><Key frame="40" value="72.8" /></ActuatorCurve><ActuatorCurve name="value" actuator="RHand" mute="0" unit="1"><Key frame="14" value="0.18" /><Key frame="25" value="0.56" /><Key frame="40" value="0.3068" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0"><Key frame="14" value="82.1812" /><Key frame="25" value="80.7749" /><Key frame="40" value="86.5758" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0"><Key frame="14" value="-13.5704" /><Key frame="25" value="-12.34" /><Key frame="40" value="-14.713" /></ActuatorCurve><ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0"><Key frame="14" value="4.30429" /><Key frame="25" value="54.1389" /><Key frame="40" value="8.17153" /></ActuatorCurve><ActuatorCurve name="value" actuator="HipPitch" mute="0" unit="0"><Key frame="11" value="-8.63141" /><Key frame="26" value="2.25681" /><Key frame="39" value="-1.93656" /></ActuatorCurve><ActuatorCurve name="value" actuator="HipRoll" mute="0" unit="0"><Key frame="26" value="-3.9571" /><Key frame="39" value="-5.3222" /></ActuatorCurve><ActuatorCurve name="value" actuator="KneePitch" mute="0" unit="0"><Key frame="11" value="2.71499" /><Key frame="26" value="-1.42345" /><Key frame="39" value="0.0934687" /></ActuatorCurve></ActuatorList></Timeline><Resource name="Standing" type="Lock" timeout="1" /><Resource name="All motors" type="Lock" timeout="1" /></Box><Box name="BothArmsWide" id="3" localization="8" tooltip="ID : #01F 0007&#x0A;&#x0A;===================&#x0A;&#x0A;Tags : &#x0A;- Terrible&#x0A;- Damn!&#x0A;&#x0A;===================&#x0A;&#x0A;Common dialog : Yes&#x0A;&#x0A;===================&#x0A;&#x0A;Start stance : Flex&#x0A;End stance : Center" x="439" y="427"><bitmap>media/images/box/movement/move.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="52"><ActuatorList model=""><ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0"><Key frame="14" value="-22.3208" /><Key frame="23" value="-9.62079" smooth="1" symmetrical="1"><Tangent side="left" interpType="bezier" abscissaParam="-4.26" ordinateParam="0.60092" /><Tangent side="right" interpType="bezier" abscissaParam="4.73333" ordinateParam="-0.667689" /></Key><Key frame="33" value="-19.7208" /><Key frame="52" value="-19.438" /></ActuatorCurve><ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0"><Key frame="14" value="0" /><Key frame="18" value="-7.25865" /><Key frame="23" value="5.17932" /><Key frame="28" value="-6.92171" /><Key frame="33" value="-0.667689" /><Key frame="52" value="-0.560471" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0"><Key frame="14" value="-75.025" /><Key frame="23" value="-23.1" /><Key frame="33" value="-40.1792" /><Key frame="41" value="-88.5" /><Key frame="52" value="-55.7311" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0"><Key frame="14" value="-80.2367" /><Key frame="33" value="-119.5" /><Key frame="52" value="-86.2848" /></ActuatorCurve><ActuatorCurve name="value" actuator="LHand" mute="0" unit="1"><Key frame="33" value="0.98" /><Key frame="52" value="0.47" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0"><Key frame="14" value="69.9" /><Key frame="52" value="93.9" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0"><Key frame="33" value="40.5301" /><Key frame="52" value="10.0782" /></ActuatorCurve><ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0"><Key frame="23" value="-73.5" /><Key frame="33" value="-93.1" /><Key frame="52" value="-93.0581" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0"><Key frame="14" value="76.1479" /><Key frame="23" value="23.1" /><Key frame="33" value="55.9" /><Key frame="41" value="88.5" /><Key frame="52" value="55.7311" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0"><Key frame="14" value="81.4703" /><Key frame="33" value="112.763" /><Key frame="52" value="78.6899" /></ActuatorCurve><ActuatorCurve name="value" actuator="RHand" mute="0" unit="1"><Key frame="33" value="0.98" /><Key frame="52" value="0.47" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0"><Key frame="14" value="69.9" /><Key frame="52" value="93.9" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0"><Key frame="33" value="-46.164" /><Key frame="52" value="-9.65008" /></ActuatorCurve><ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0"><Key frame="23" value="73.5" /><Key frame="33" value="93.1" /><Key frame="52" value="93.0586" /></ActuatorCurve><ActuatorCurve name="value" actuator="HipPitch" mute="0" unit="0"><Key frame="28" value="-21.7661" /><Key frame="52" value="-5.89204" /></ActuatorCurve><ActuatorCurve name="value" actuator="HipRoll" mute="0" unit="0"><Key frame="28" value="-0.321197" /><Key frame="52" value="-0.321197" /></ActuatorCurve><ActuatorCurve name="value" actuator="KneePitch" mute="0" unit="0"><Key frame="28" value="11.8618" /><Key frame="52" value="1.32302" /></ActuatorCurve></ActuatorList></Timeline><Resource name="Standing" type="Lock" timeout="1" /><Resource name="All motors" type="Lock" timeout="1" /></Box><Box name="OfferService" id="12" localization="8" tooltip="ID : #01G 0018&#x0A;&#x0A;===================&#x0A;&#x0A;Tags : &#x0A;- Twice&#x0A;- And&#x0A;- 1,2&#x0A;- Both&#x0A;- Or&#x0A;&#x0A;===================&#x0A;&#x0A;Common dialog : No&#x0A;&#x0A;===================&#x0A;&#x0A;Start stance : Center&#x0A;End stance : Center" x="447" y="553"><bitmap>media/images/box/movement/move.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="61"><ActuatorList model=""><ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0"><Key frame="10" value="-12.6174" /><Key frame="18" value="-19.112" /><Key frame="27" value="-12.4453" /><Key frame="33" value="-12.4453" /><Key frame="39" value="-19.112" /><Key frame="45" value="-14.212" /><Key frame="48" value="-14.212" /><Key frame="61" value="-24.912" /></ActuatorCurve><ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0"><Key frame="10" value="0" /><Key frame="27" value="0.129999" /><Key frame="33" value="0.129999" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0"><Key frame="16" value="-60.2296" /><Key frame="33" value="-59.9567" /><Key frame="39" value="-80.8" /><Key frame="45" value="-60.7" /><Key frame="48" value="-60.7" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0"><Key frame="16" value="-77.868" /><Key frame="33" value="-78.4" /><Key frame="45" value="-110.2" /><Key frame="48" value="-110.2" /><Key frame="61" value="-85.9" /></ActuatorCurve><ActuatorCurve name="value" actuator="LHand" mute="0" unit="1"><Key frame="16" value="0.43" /><Key frame="33" value="0.43" /><Key frame="45" value="0.98" /><Key frame="48" value="0.98" /><Key frame="61" value="0.64" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0"><Key frame="16" value="72.4573" /><Key frame="33" value="72.2565" /><Key frame="61" value="92.4" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0"><Key frame="16" value="22.4" /><Key frame="33" value="9.04151" /><Key frame="45" value="13.6921" /><Key frame="48" value="13.6921" /></ActuatorCurve><ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0"><Key frame="16" value="-79.2683" /><Key frame="33" value="-79.3717" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0"><Key frame="10" value="60.5069" /><Key frame="18" value="74.7" /><Key frame="27" value="60.5217" /><Key frame="33" value="60.5217" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0"><Key frame="10" value="79.2507" /><Key frame="27" value="95.2" /><Key frame="33" value="95.2" /><Key frame="61" value="76.6" /></ActuatorCurve><ActuatorCurve name="value" actuator="RHand" mute="0" unit="1"><Key frame="10" value="0.43" /><Key frame="27" value="0.98" /><Key frame="33" value="0.98" /><Key frame="61" value="0.57" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0"><Key frame="10" value="74.5735" /><Key frame="27" value="74.3103" /><Key frame="33" value="74.3103" /><Key frame="61" value="84.9" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0"><Key frame="10" value="-16.346" /><Key frame="27" value="-16.5904" /><Key frame="33" value="-16.5904" /></ActuatorCurve><ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0"><Key frame="10" value="69.3826" /><Key frame="27" value="98" /><Key frame="33" value="98" /><Key frame="61" value="71.8" /></ActuatorCurve><ActuatorCurve name="value" actuator="HipPitch" mute="0" unit="0"><Key frame="18" value="-9.1521" /><Key frame="27" value="-5.1346" /><Key frame="33" value="-2.53651" /><Key frame="48" value="-2.53651" /></ActuatorCurve><ActuatorCurve name="value" actuator="HipRoll" mute="0" unit="0"><Key frame="27" value="-4.72052" /><Key frame="33" value="-6.07663" /><Key frame="48" value="-0.557092" /></ActuatorCurve><ActuatorCurve name="value" actuator="KneePitch" mute="0" unit="0"><Key frame="18" value="4.86026" /><Key frame="27" value="2.22875" /><Key frame="33" value="1.15339" /><Key frame="48" value="1.15339" /></ActuatorCurve></ActuatorList></Timeline><Resource name="Standing" type="Lock" timeout="1" /><Resource name="All motors" type="Lock" timeout="1" /></Box><Box name="PointToAboutUs" id="1" localization="8" tooltip="ID : #01B 0002&#x0A;&#x0A;===================&#x0A;&#x0A;Tags : &#x0A;- You&#x0A;- Yourself&#x0A;&#x0A;===================&#x0A;&#x0A;Common dialog : Yes&#x0A;&#x0A;===================&#x0A;&#x0A;Start stance : LeanFront&#x0A;End stance : Center" x="443" y="679"><bitmap>media/images/box/movement/move.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="48"><ActuatorList model=""><ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0"><Key frame="10" value="-21.6849" /><Key frame="15" value="-14.2134" /><Key frame="19" value="-21.9281" /><Key frame="26" value="-13.4134" /><Key frame="37" value="-20.9846" /><Key frame="47" value="-22.1272" /></ActuatorCurve><ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0"><Key frame="10" value="-1.40867" /><Key frame="19" value="-5.89115" /><Key frame="26" value="-8.26423" /><Key frame="37" value="-5.45169" /><Key frame="47" value="-5.45169" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0"><Key frame="11" value="-81.8248" /><Key frame="20" value="-35.7" /><Key frame="27" value="-42.2735" /><Key frame="38" value="-59.6761" /><Key frame="48" value="-63.7191" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0"><Key frame="11" value="-67.8548" /><Key frame="20" value="-68.4701" /><Key frame="27" value="-71.6341" /><Key frame="38" value="-55.6379" /><Key frame="48" value="-53.2648" /></ActuatorCurve><ActuatorCurve name="value" actuator="LHand" mute="0" unit="1"><Key frame="11" value="0.0984" /><Key frame="20" value="0.94" /><Key frame="27" value="0.39" /><Key frame="38" value="0.09" /><Key frame="48" value="0.02" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0"><Key frame="11" value="61.4339" /><Key frame="20" value="49" /><Key frame="27" value="51.2385" /><Key frame="38" value="68.9047" /><Key frame="48" value="68.1137" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0"><Key frame="11" value="27.855" /><Key frame="20" value="26.3608" /><Key frame="27" value="26.4487" /><Key frame="38" value="25.8335" /><Key frame="48" value="24.603" /></ActuatorCurve><ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0"><Key frame="11" value="-52.6496" /><Key frame="20" value="-52.0343" /><Key frame="27" value="-52.6496" /><Key frame="38" value="-5.80326" /><Key frame="48" value="8.34731" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0"><Key frame="11" value="50.1007" /><Key frame="20" value="51.507" /><Key frame="27" value="53.089" /><Key frame="38" value="42.0147" /><Key frame="48" value="40.6084" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0"><Key frame="11" value="79.2759" /><Key frame="20" value="73.1179" /><Key frame="27" value="86.2528" /><Key frame="38" value="91.6069" /><Key frame="48" value="87.9772" /></ActuatorCurve><ActuatorCurve name="value" actuator="RHand" mute="0" unit="1"><Key frame="11" value="0.5008" /><Key frame="20" value="0.28" /><Key frame="27" value="0.14" /><Key frame="38" value="0.1532" /><Key frame="48" value="0.1532" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0"><Key frame="11" value="103.627" /><Key frame="20" value="104.154" /><Key frame="27" value="105.56" /><Key frame="38" value="103.539" /><Key frame="48" value="104.154" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0"><Key frame="11" value="-6.85796" /><Key frame="20" value="-15.7874" /><Key frame="27" value="-16.9337" /><Key frame="38" value="-10.1137" /><Key frame="48" value="-9.21603" /></ActuatorCurve><ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0"><Key frame="11" value="-4.39699" /><Key frame="20" value="-4.39699" /><Key frame="27" value="-4.39699" /><Key frame="38" value="-4.39699" /><Key frame="48" value="-4.39699" /></ActuatorCurve><ActuatorCurve name="value" actuator="HipPitch" mute="0" unit="0"><Key frame="13" value="-8.28706" /><Key frame="29" value="-14.5624" /><Key frame="40" value="-13.954" /></ActuatorCurve><ActuatorCurve name="value" actuator="HipRoll" mute="0" unit="0"><Key frame="13" value="0.410352" /><Key frame="29" value="1.27357" /><Key frame="40" value="-0.178097" /></ActuatorCurve><ActuatorCurve name="value" actuator="KneePitch" mute="0" unit="0"><Key frame="13" value="1.62326" /><Key frame="29" value="5.42188" /><Key frame="40" value="4.60352" /></ActuatorCurve></ActuatorList></Timeline><Resource name="Standing" type="Lock" timeout="1" /><Resource name="All motors" type="Lock" timeout="1" /></Box><Box name="Bye" id="2" localization="8" tooltip="tags:&#x0A;hello; hey; hi" x="423" y="36"><bitmap>media/images/box/movement/move.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.oldfps = ALFrameManager.getTimelineFps(self.getName())
        try:
            frameNumber.increaseParent( self.getName() );
        except BaseException, err:
            # if you don't want to use some encapsulated sub box, you will in that case. no worry...
            pass

    def onLoad(self):
        #puts code for box cleanup here
        pass

    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onInput_onStart(self):
        newfps = (self.oldfps * self.getParameter("FPS (%)")) / 100
        ALFrameManager.setTimelineFps(self.getName(), newfps)
        pass

    def onInput_onStop(self):
        ""]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Parameter name="FPS (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="20" max="200" tooltip="" id="5" /><Timeline enable="1" fps="25" start_frame="1" end_frame="185" size="185"><BehaviorLayer name="led" /><BehaviorLayer name="sounds"><BehaviorKeyframe name="keyframe35" index="35"><Diagram /></BehaviorKeyframe></BehaviorLayer><BehaviorLayer name="tablet"><BehaviorKeyframe name="keyframe1" index="1"><Diagram><Box name="Show Image" id="13" localization="8" tooltip="display an image on the screen&#x0A;&#x0A;V1.0.0&#x0A;" x="183" y="42"><bitmap>media/images/box/interaction/rec_movie.png</bitmap><script language="4"><content><![CDATA[

class MyClass(GeneratedClass):

    def onLoad(self):
        self.frameManager = None
        try:
            self.frameManager = ALProxy("ALFrameManager")
        except Exception as e:
            self.logger.error(e)

    def onUnload(self):
        pass

    def _getTabletService(self):
        tabletService = None
        try:
            tabletService = self.session().service("ALTabletService")
        except Exception as e:
            self.logger.error(e)
        return tabletService

    def _getAppName(self):
        import os
        if self.frameManager:
            behaviorPath = os.path.normpath(self.frameManager.getBehaviorPath(self.behaviorId))
            appsFolderFragment = os.path.join("PackageManager", "apps")
            if not (appsFolderFragment in behaviorPath):
                self.logger.error("appsFolderFragment is not in behaviorPath")
            fragment = behaviorPath.split(appsFolderFragment, 1)[1]
            return fragment.lstrip("\\/")
        else:
            self.logger.warning("No ALFrameManager")

    def _getAbsoluteUrl(self, partial_url):
        import os
        subPath = os.path.join(self._getAppName(), os.path.normpath(partial_url).lstrip("\\/"))
        # We create TabletService here in order to avoid
        # problems with connections and disconnections of the tablet during the life of the application
        return "http://%s/apps/%s" %(self._getTabletService().robotIp(), subPath.replace(os.path.sep, "/"))

    def onInput_onStart(self):
        # We create TabletService here in order to avoid
        # problems with connections and disconnections of the tablet during the life of the application
        tabletService = self._getTabletService()
        if tabletService:
            try:
                url = self.getParameter("ImageUrl")
                if url == '':
                    self.logger.error("URL of the image is empty")
                if not url.startswith('http'):
                    url = self._getAbsoluteUrl(url)
                tabletService.showImage(url)
            except Exception as err:
                self.logger.error("Error during ShowImage : %s " % err)
                self.onStopped()
        else:
            self.logger.warning("No ALTabletService, can't display the image.")
            self.onStopped()

    def onInput_onHideImage(self):
        # We create TabletService here in order to avoid
        # problems with connections and disconnections of the tablet during the life of the application
        tabletService = self._getTabletService()
        if tabletService:
            try:
                tabletService.hideImage()
            except Exception as err:
                self.logger.error("Error during HideImage : %s " % err)
                self.onStopped()
        else:
            self.logger.warning("No ALTabletService, can't hide the image.")
            self.onStopped()

    def onInput_onPreLoadImage(self):
        # We create TabletService here in order to avoid
        # problems with connections and disconnections of the tablet during the life of the application
        tabletService = self._getTabletService()
        if tabletService:
            try:
                partialUrl = self.getParameter("ImageUrl")
                fullUrl = self._getAbsoluteUrl(partialUrl)
                tabletService.preLoadImage(fullUrl)
            except Exception as err:
                self.logger.warning("Error during preLoadImage : %s " % err)
                self.onStopped()
        else:
            self.logger.warning("No ALTabletService, can't preload the image.")
            self.onStopped()

    def onInput_onStop(self):
        self.onUnload()
        self.onStopped()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Input name="onHideImage" type="1" type_size="1" nature="1" inner="0" tooltip="Hide the image when a signal is received on this input." id="4" /><Input name="onPreLoadImage" type="1" type_size="1" nature="1" inner="0" tooltip="Preload the image when a signal is received on this input." id="5" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="6" /><Parameter name="ImageUrl" inherits_from_parent="0" content_type="3" value="hello.gif" default_value="" custom_choice="0" tooltip='path of the image inside the &quot;html&quot; folder (e.g. &quot;/images/myimage.png&quot;' id="7" /></Box><Link inputowner="13" indexofinput="2" outputowner="0" indexofoutput="1" /></Diagram></BehaviorKeyframe></BehaviorLayer><ActuatorList model="nao"><ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0"><Key frame="45" value="87.5378" /><Key frame="64" value="87.4499" /><Key frame="95" value="87.7135" /><Key frame="122" value="89.1198" /><Key frame="140" value="87.2741" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0"><Key frame="45" value="7.11683" /><Key frame="64" value="4.65586" /><Key frame="95" value="4.65586" /><Key frame="122" value="4.91953" /><Key frame="140" value="7.02893" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0"><Key frame="45" value="-67.1517" /><Key frame="64" value="-59.0656" /><Key frame="95" value="-61.4387" /><Key frame="122" value="-66.1849" /><Key frame="140" value="-67.1517" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0"><Key frame="45" value="-28.1229" /><Key frame="64" value="-32.6933" /><Key frame="95" value="-32.6933" /><Key frame="122" value="-31.1992" /><Key frame="140" value="-28.1229" /></ActuatorCurve><ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0"><Key frame="140" value="7.11683" /></ActuatorCurve><ActuatorCurve name="value" actuator="LHand" mute="0" unit="1"><Key frame="140" value="0.3004" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0"><Key frame="42" value="14.153" /><Key frame="62" value="-66.6195" /><Key frame="79" value="-62.4007" /><Key frame="93" value="-71.1899" /><Key frame="110" value="-65.8285" /><Key frame="120" value="-16.8728" /><Key frame="138" value="86.1363" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0"><Key frame="42" value="-13.8893" /><Key frame="62" value="-55.1105" /><Key frame="79" value="-26.3699" /><Key frame="93" value="-55.1984" /><Key frame="110" value="-18.8112" /><Key frame="120" value="-12.3072" /><Key frame="138" value="-7.12163" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0"><Key frame="42" value="-17.9323" /><Key frame="62" value="32.3418" /><Key frame="79" value="22.41" /><Key frame="93" value="20.3006" /><Key frame="110" value="21.8826" /><Key frame="120" value="55.1936" /><Key frame="138" value="66.6195" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0"><Key frame="42" value="79.3686" /><Key frame="62" value="14.4166" /><Key frame="69" value="20" /><Key frame="79" value="53.5285" /><Key frame="87" value="39" /><Key frame="93" value="11.692" /><Key frame="103" value="15" /><Key frame="110" value="40.5205" /><Key frame="120" value="56.6926" /><Key frame="138" value="24.7879" /></ActuatorCurve><ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0"><Key frame="62" value="-17.9323" /><Key frame="110" value="-17.405" /><Key frame="138" value="9.75358" /></ActuatorCurve><ActuatorCurve name="value" actuator="RHand" mute="0" unit="1"><Key frame="62" value="0.853478" /><Key frame="110" value="0.854933" /><Key frame="138" value="0.3044" /></ActuatorCurve><ActuatorCurve name="value" actuator="LHipYawPitch" mute="0" unit="-1"><Key frame="63" value="0" /><Key frame="139" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="LHipRoll" mute="0" unit="-1"><Key frame="63" value="0" /><Key frame="139" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="LHipPitch" mute="0" unit="-1"><Key frame="63" value="0" /><Key frame="139" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="LKneePitch" mute="0" unit="-1"><Key frame="63" value="0" /><Key frame="139" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="LAnklePitch" mute="0" unit="-1"><Key frame="63" value="0" /><Key frame="139" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="LAnkleRoll" mute="0" unit="-1"><Key frame="63" value="0" /><Key frame="139" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="RHipRoll" mute="0" unit="-1"><Key frame="63" value="0" /><Key frame="139" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="RHipPitch" mute="0" unit="-1"><Key frame="63" value="0" /><Key frame="139" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="RKneePitch" mute="0" unit="-1"><Key frame="63" value="0" /><Key frame="139" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="RAnklePitch" mute="0" unit="-1"><Key frame="63" value="0" /><Key frame="139" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="RAnkleRoll" mute="0" unit="-1"><Key frame="63" value="0" /><Key frame="139" value="0" /></ActuatorCurve></ActuatorList></Timeline></Box><Link inputowner="19" indexofinput="2" outputowner="0" indexofoutput="5" /><Link inputowner="18" indexofinput="2" outputowner="0" indexofoutput="6" /><Link inputowner="3" indexofinput="2" outputowner="0" indexofoutput="7" /><Link inputowner="12" indexofinput="2" outputowner="0" indexofoutput="8" /><Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="9" /><Link inputowner="0" indexofinput="10" outputowner="19" indexofoutput="4" /><Link inputowner="0" indexofinput="10" outputowner="18" indexofoutput="4" /><Link inputowner="0" indexofinput="10" outputowner="3" indexofoutput="4" /><Link inputowner="0" indexofinput="10" outputowner="12" indexofoutput="4" /><Link inputowner="0" indexofinput="10" outputowner="1" indexofoutput="4" /><Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="4" /><Link inputowner="0" indexofinput="10" outputowner="2" indexofoutput="4" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline></Box><Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="3" indexofinput="2" outputowner="0" indexofoutput="4" /><Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="0" indexofinput="12" outputowner="5" indexofoutput="4" /><Link inputowner="5" indexofinput="2" outputowner="3" indexofoutput="4" /><Link inputowner="13" indexofinput="2" outputowner="14" indexofoutput="3" /><Link inputowner="5" indexofinput="2" outputowner="15" indexofoutput="15" /><Link inputowner="5" indexofinput="2" outputowner="15" indexofoutput="22" /><Link inputowner="15" indexofinput="2" outputowner="1" indexofoutput="4" /><Link inputowner="15" indexofinput="2" outputowner="13" indexofoutput="4" /><Link inputowner="14" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="19" indexofinput="2" outputowner="15" indexofoutput="26" /><Link inputowner="0" indexofinput="12" outputowner="6" indexofoutput="10" /><Link inputowner="0" indexofinput="12" outputowner="16" indexofoutput="11" /><Link inputowner="16" indexofinput="4" outputowner="15" indexofoutput="16" /><Link inputowner="16" indexofinput="5" outputowner="15" indexofoutput="17" /><Link inputowner="16" indexofinput="6" outputowner="15" indexofoutput="18" /><Link inputowner="16" indexofinput="7" outputowner="15" indexofoutput="19" /><Link inputowner="16" indexofinput="8" outputowner="15" indexofoutput="20" /><Link inputowner="16" indexofinput="9" outputowner="15" indexofoutput="21" /><Link inputowner="16" indexofinput="10" outputowner="15" indexofoutput="23" /><Link inputowner="15" indexofinput="2" outputowner="4" indexofoutput="10" /><Link inputowner="4" indexofinput="4" outputowner="15" indexofoutput="22" /><Link inputowner="4" indexofinput="9" outputowner="15" indexofoutput="17" /><Link inputowner="4" indexofinput="8" outputowner="15" indexofoutput="19" /><Link inputowner="4" indexofinput="7" outputowner="15" indexofoutput="21" /><Link inputowner="4" indexofinput="6" outputowner="15" indexofoutput="23" /><Link inputowner="4" indexofinput="5" outputowner="15" indexofoutput="20" /><Link inputowner="4" indexofinput="5" outputowner="15" indexofoutput="16" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline></Box></ChoregrapheProject>