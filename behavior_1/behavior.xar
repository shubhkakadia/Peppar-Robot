<?xml version="1.0" encoding="UTF-8" ?><ChoregrapheProject xmlns="http://www.aldebaran-robotics.com/schema/choregraphe/project.xsd" xar_version="3"><Box name="root" id="-1" localization="8" tooltip="Root box of Choregraphe&apos;s behavior. Highest level possible." x="0" y="0"><bitmap>media/images/box/root.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Input name="clickedListen" type="0" type_size="1" nature="4" stm_value_name="clickedListen" inner="1" tooltip="clickedListen desc" id="4" /><Input name="WavingDetection/Waving" type="0" type_size="1" nature="4" stm_value_name="WavingDetection/Waving" inner="1" tooltip="WavingDetection/Waving desc" id="5" /><Input name="WavingDetection/PersonWaving" type="0" type_size="1" nature="4" stm_value_name="WavingDetection/PersonWaving" inner="1" tooltip="WavingDetection/PersonWaving desc" id="6" /><Input name="GazeAnalysis/PersonStartsLookingAtRobot" type="0" type_size="1" nature="4" stm_value_name="GazeAnalysis/PersonStartsLookingAtRobot" inner="1" tooltip="GazeAnalysis/PersonStartsLookingAtRobot desc" id="7" /><Input name="EngagementZones/PersonEnteredZone2" type="0" type_size="1" nature="4" stm_value_name="EngagementZones/PersonEnteredZone2" inner="1" tooltip="EngagementZones/PersonEnteredZone2 desc" id="8" /><Input name="EngagementZones/PersonEnteredZone1" type="0" type_size="1" nature="4" stm_value_name="EngagementZones/PersonEnteredZone1" inner="1" tooltip="EngagementZones/PersonEnteredZone1 desc" id="9" /><Input name="EngagementZones/PersonApproached" type="0" type_size="1" nature="4" stm_value_name="EngagementZones/PersonApproached" inner="1" tooltip="EngagementZones/PersonApproached desc" id="10" /><Input name="EngagementZones/PersonMovedAway" type="0" type_size="1" nature="4" stm_value_name="EngagementZones/PersonMovedAway" inner="1" tooltip="EngagementZones/PersonMovedAway desc" id="11" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="12" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram scale="100"><Box name="Confdence Treshold" id="1" localization="8" tooltip="" x="141" y="66"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.ALDialog = ALProxy('ALDialog')

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        #self.onStopped() #activate the output of the box
        # ALDialog = ALProxy('ALDialog')
        if self.ALDialog:
            self.ALDialog.setASRConfidenceThreshold(0.4)
        self.onStopped()

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Box name="Active Listening" id="3" localization="8" tooltip="" x="262" y="428"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.als = ALProxy('ALSpeechRecognition')

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        #self.onStopped() #activate the output of the box
        self.logger.info("RUNNING ENABLE LISTEN")
        self.als.pause(False)
        self.onStopped()

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Box name="Diagram" id="4" localization="8" tooltip="This box is empty and should be used to create any box diagram you would like.&#x0A;&#x0A;To edit its diagram, double-click on it." x="1251" y="598"><bitmap>media/images/box/box-diagram.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Input name="startMenu" type="1" type_size="1" nature="1" inner="0" tooltip="" id="4" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="5" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram><Box name="menu" id="1" localization="8" tooltip="" x="495" y="110"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)


    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):

        uid = self.packageUid()

        ip = '192.168.0.160'
        url = 'http://' + ip + '/apps/' + uid + '/pages/menu.html'

        # self.session().service('ALTabletService').loadUrl("https://google.com")

        # at this point, the page is still hidden by default tablet screen
        self.session().service('ALTabletService').showWebview()


    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box

    def onWordRecognized(self, event):
        if event == "menu":
            # Load page one
            uid = self.packageUid()
            #self.session().service('ALTabletService').loadApplication(uid)

            # method2: use loadUrl
            #ip = self.session().service('ALTabletService').getRobotIp()
            ip = '192.168.0.160'
            url = 'http://' + ip + '/apps/' + uid + '/pages/menu.html'
            self.session().service('ALTabletService').loadUrl(url)

            # Show the loaded page
            self.session().service('ALTabletService').showWebview()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Box name="Menu" id="2" localization="8" tooltip="" x="351" y="273"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)



    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        #self.onStopped() #activate the output of the box

        uid = self.packageUid()
        ip = '192.168.0.160'
        url = 'http://' + ip + '/apps/' + uid + '/pages/menu.html'
        self.session().service('ALTabletService').loadUrl(url)
        self.session().service('ALTabletService').showWebview()

        #self.asr_service.subscribe("my_box")
        #self.asr_service.pause(False)

    def onInput_onStop(self):
        #self.asr_service.pause(True)
        #self.asr_service.unsubscribe("my_box")
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box





#    def onWordRecognized(self, event):
#        if event == "menu":
#            # Load page one
#            uid = self.packageUid()
#            #self.session().service('ALTabletService').loadApplication(uid)

#            # method2: use loadUrl
#            #ip = self.session().service('ALTabletService').getRobotIp()
#            ip = '192.168.0.160'
#            url = 'http://' + ip + '/apps/' + uid + '/pages/menu.html'
#            self.session().service('ALTabletService').loadUrl(url)

#            # Show the loaded page
#            self.session().service('ALTabletService').showWebview()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Box name="Aboutus" id="7" localization="8" tooltip="" x="433" y="451"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)



    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        #self.onStopped() #activate the output of the box

        uid = self.packageUid()
        ip = '192.168.0.160'
        url = 'http://' + ip + '/apps/' + uid + '/pages/aboutus.html'
        self.session().service('ALTabletService').loadUrl(url)
        self.session().service('ALTabletService').showWebview()

        #self.asr_service.subscribe("my_box")
        #self.asr_service.pause(False)

    def onInput_onStop(self):
        #self.asr_service.pause(True)
        #self.asr_service.unsubscribe("my_box")
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box





#    def onWordRecognized(self, event):
#        if event == "menu":
#            # Load page one
#            uid = self.packageUid()
#            #self.session().service('ALTabletService').loadApplication(uid)

#            # method2: use loadUrl
#            #ip = self.session().service('ALTabletService').getRobotIp()
#            ip = '192.168.0.160'
#            url = 'http://' + ip + '/apps/' + uid + '/pages/menu.html'
#            self.session().service('ALTabletService').loadUrl(url)

#            # Show the loaded page
#            self.session().service('ALTabletService').showWebview()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Box name="Navigate" id="8" localization="8" tooltip="" x="327" y="544"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)



    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        #self.onStopped() #activate the output of the box

        uid = self.packageUid()
        ip = '192.168.0.160'
        url = 'http://' + ip + '/apps/' + uid + '/pages/navigate.html'
        self.session().service('ALTabletService').loadUrl(url)
        self.session().service('ALTabletService').showWebview()

        #self.asr_service.subscribe("my_box")
        #self.asr_service.pause(False)

    def onInput_onStop(self):
        #self.asr_service.pause(True)
        #self.asr_service.unsubscribe("my_box")
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box





#    def onWordRecognized(self, event):
#        if event == "menu":
#            # Load page one
#            uid = self.packageUid()
#            #self.session().service('ALTabletService').loadApplication(uid)

#            # method2: use loadUrl
#            #ip = self.session().service('ALTabletService').getRobotIp()
#            ip = '192.168.0.160'
#            url = 'http://' + ip + '/apps/' + uid + '/pages/menu.html'
#            self.session().service('ALTabletService').loadUrl(url)

#            # Show the loaded page
#            self.session().service('ALTabletService').showWebview()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Box name="Services" id="9" localization="8" tooltip="" x="499" y="665"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)



    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        #self.onStopped() #activate the output of the box

        uid = self.packageUid()
        ip = '192.168.0.160'
        url = 'http://' + ip + '/apps/' + uid + '/pages/services.html'
        self.session().service('ALTabletService').loadUrl(url)
        self.session().service('ALTabletService').showWebview()

        #self.asr_service.subscribe("my_box")
        #self.asr_service.pause(False)

    def onInput_onStop(self):
        #self.asr_service.pause(True)
        #self.asr_service.unsubscribe("my_box")
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box





#    def onWordRecognized(self, event):
#        if event == "menu":
#            # Load page one
#            uid = self.packageUid()
#            #self.session().service('ALTabletService').loadApplication(uid)

#            # method2: use loadUrl
#            #ip = self.session().service('ALTabletService').getRobotIp()
#            ip = '192.168.0.160'
#            url = 'http://' + ip + '/apps/' + uid + '/pages/menu.html'
#            self.session().service('ALTabletService').loadUrl(url)

#            # Show the loaded page
#            self.session().service('ALTabletService').showWebview()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="0" indexofinput="5" outputowner="2" indexofoutput="4" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline></Box><Box name="main" id="5" localization="8" tooltip="" x="679" y="7"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)



    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        #self.onStopped() #activate the output of the box

        uid = self.packageUid()
        self.session().service('ALTabletService').loadApplication(uid)
        self.session().service('ALTabletService').showWebview()

        #self.asr_service.subscribe("my_box")
        #self.asr_service.pause(False)

    def onInput_onStop(self):
        #self.asr_service.pause(True)
        #self.asr_service.unsubscribe("my_box")
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box





#    def onWordRecognized(self, event):
#        if event == "menu":
#            # Load page one
#            uid = self.packageUid()
#            #self.session().service('ALTabletService').loadApplication(uid)

#            # method2: use loadUrl
#            #ip = self.session().service('ALTabletService').getRobotIp()
#            ip = '192.168.0.160'
#            url = 'http://' + ip + '/apps/' + uid + '/pages/menu.html'
#            self.session().service('ALTabletService').loadUrl(url)

#            # Show the loaded page
#            self.session().service('ALTabletService').showWebview()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Box name="Menu" id="2" localization="8" tooltip="" x="677" y="131"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)



    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        #self.onStopped() #activate the output of the box

        uid = self.packageUid()
        ip = '192.168.0.160'
        url = 'http://' + ip + '/apps/' + uid + '/pages/menu.html'
        self.session().service('ALTabletService').loadUrl(url)
        self.session().service('ALTabletService').showWebview()

        #self.asr_service.subscribe("my_box")
        #self.asr_service.pause(False)

    def onInput_onStop(self):
        #self.asr_service.pause(True)
        #self.asr_service.unsubscribe("my_box")
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box





#    def onWordRecognized(self, event):
#        if event == "menu":
#            # Load page one
#            uid = self.packageUid()
#            #self.session().service('ALTabletService').loadApplication(uid)

#            # method2: use loadUrl
#            #ip = self.session().service('ALTabletService').getRobotIp()
#            ip = '192.168.0.160'
#            url = 'http://' + ip + '/apps/' + uid + '/pages/menu.html'
#            self.session().service('ALTabletService').loadUrl(url)

#            # Show the loaded page
#            self.session().service('ALTabletService').showWebview()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Box name="Aboutus" id="7" localization="8" tooltip="" x="685" y="239"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)



    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        #self.onStopped() #activate the output of the box

        uid = self.packageUid()
        ip = '192.168.0.160'
        url = 'http://' + ip + '/apps/' + uid + '/pages/aboutus.html'
        self.session().service('ALTabletService').loadUrl(url)
        self.session().service('ALTabletService').showWebview()

        #self.asr_service.subscribe("my_box")
        #self.asr_service.pause(False)

    def onInput_onStop(self):
        #self.asr_service.pause(True)
        #self.asr_service.unsubscribe("my_box")
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box





#    def onWordRecognized(self, event):
#        if event == "menu":
#            # Load page one
#            uid = self.packageUid()
#            #self.session().service('ALTabletService').loadApplication(uid)

#            # method2: use loadUrl
#            #ip = self.session().service('ALTabletService').getRobotIp()
#            ip = '192.168.0.160'
#            url = 'http://' + ip + '/apps/' + uid + '/pages/menu.html'
#            self.session().service('ALTabletService').loadUrl(url)

#            # Show the loaded page
#            self.session().service('ALTabletService').showWebview()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Box name="Navigate" id="8" localization="8" tooltip="" x="680" y="357"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)



    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        #self.onStopped() #activate the output of the box

        uid = self.packageUid()
        ip = '192.168.0.160'
        url = 'http://' + ip + '/apps/' + uid + '/pages/navigate.html'
        self.session().service('ALTabletService').loadUrl(url)
        self.session().service('ALTabletService').showWebview()

        #self.asr_service.subscribe("my_box")
        #self.asr_service.pause(False)

    def onInput_onStop(self):
        #self.asr_service.pause(True)
        #self.asr_service.unsubscribe("my_box")
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box





#    def onWordRecognized(self, event):
#        if event == "menu":
#            # Load page one
#            uid = self.packageUid()
#            #self.session().service('ALTabletService').loadApplication(uid)

#            # method2: use loadUrl
#            #ip = self.session().service('ALTabletService').getRobotIp()
#            ip = '192.168.0.160'
#            url = 'http://' + ip + '/apps/' + uid + '/pages/menu.html'
#            self.session().service('ALTabletService').loadUrl(url)

#            # Show the loaded page
#            self.session().service('ALTabletService').showWebview()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Box name="Services" id="9" localization="8" tooltip="" x="687" y="470"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)



    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        #self.onStopped() #activate the output of the box
        uid = self.packageUid()
        ip = '192.168.0.160'
        url = 'http://' + ip + '/apps/' + uid + '/pages/services.html'
        self.session().service('ALTabletService').loadUrl(url)
        self.session().service('ALTabletService').showWebview()

        #self.asr_service.subscribe("my_box")
        #self.asr_service.pause(False)

    def onInput_onStop(self):
        #self.asr_service.pause(True)
        #self.asr_service.unsubscribe("my_box")
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box





#    def onWordRecognized(self, event):
#        if event == "menu":
#            # Load page one
#            uid = self.packageUid()
#            #self.session().service('ALTabletService').loadApplication(uid)

#            # method2: use loadUrl
#            #ip = self.session().service('ALTabletService').getRobotIp()
#            ip = '192.168.0.160'
#            url = 'http://' + ip + '/apps/' + uid + '/pages/menu.html'
#            self.session().service('ALTabletService').loadUrl(url)

#            # Show the loaded page
#            self.session().service('ALTabletService').showWebview()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Box name="OurTeam" id="10" localization="8" tooltip="" x="691" y="585"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)



    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        #self.onStopped() #activate the output of the box

        uid = self.packageUid()
        ip = '192.168.0.160'
        url = 'http://' + ip + '/apps/' + uid + '/pages/ourteam.html'
        self.session().service('ALTabletService').loadUrl(url)
        self.session().service('ALTabletService').showWebview()

        #self.asr_service.subscribe("my_box")
        #self.asr_service.pause(False)

    def onInput_onStop(self):
        #self.asr_service.pause(True)
        #self.asr_service.unsubscribe("my_box")
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box





#    def onWordRecognized(self, event):
#        if event == "menu":
#            # Load page one
#            uid = self.packageUid()
#            #self.session().service('ALTabletService').loadApplication(uid)

#            # method2: use loadUrl
#            #ip = self.session().service('ALTabletService').getRobotIp()
#            ip = '192.168.0.160'
#            url = 'http://' + ip + '/apps/' + uid + '/pages/menu.html'
#            self.session().service('ALTabletService').loadUrl(url)

#            # Show the loaded page
#            self.session().service('ALTabletService').showWebview()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Box name="Feedback" id="11" localization="8" tooltip="" x="696" y="696"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        #self.onStopped() #activate the output of the box

        uid = self.packageUid()
        ip = '192.168.0.160'
        url = 'http://' + ip + '/apps/' + uid + '/pages/feedback.html'
        self.session().service('ALTabletService').loadUrl(url)
        self.session().service('ALTabletService').showWebview()

        #self.asr_service.subscribe("my_box")
        #self.asr_service.pause(False)

    def onInput_onStop(self):
        #self.asr_service.pause(True)
        #self.asr_service.unsubscribe("my_box")
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Output name="Rating1" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" /></Box><Box name="Kisses" id="12" localization="8" tooltip="ID : #02A 0002&#x0A;&#x0A;===================&#x0A;&#x0A;Tags : &#x0A;- Kisses" x="1036" y="744"><bitmap>media/images/box/movement/move.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="127"><ActuatorList model=""><ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0"><Key frame="26" value="-18.3718" /><Key frame="43" value="-21.0085" /><Key frame="56" value="-21.0085" /><Key frame="80" value="-17" /><Key frame="105" value="-22.9421" /><Key frame="127" value="-14.0651" /></ActuatorCurve><ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0"><Key frame="26" value="-4.3091" /><Key frame="43" value="-1.84813" /><Key frame="56" value="-1.84813" /><Key frame="80" value="-1.84813" /><Key frame="105" value="-2.02391" /><Key frame="127" value="-2.11181" /></ActuatorCurve><ActuatorCurve name="value" actuator="HipPitch" mute="0" unit="0"><Key frame="41" value="-27.4001" /><Key frame="56" value="-27.4001" /><Key frame="76" value="-2.83052" /></ActuatorCurve><ActuatorCurve name="value" actuator="HipRoll" mute="0" unit="0"><Key frame="41" value="0" /><Key frame="56" value="0" /><Key frame="76" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="KneePitch" mute="0" unit="0"><Key frame="41" value="10.2097" /><Key frame="56" value="10.2097" /><Key frame="76" value="-0.792584" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0"><Key frame="24" value="-30.6718" /><Key frame="41" value="-89.2077" /><Key frame="54" value="-89.2077" /><Key frame="78" value="-44.9982" /><Key frame="103" value="-28.6503" /><Key frame="125" value="-21.619" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0"><Key frame="24" value="-110.746" /><Key frame="41" value="-50.2765" /><Key frame="54" value="-50.2765" /><Key frame="78" value="-101.517" /><Key frame="103" value="-109.691" /><Key frame="125" value="-65.4817" /></ActuatorCurve><ActuatorCurve name="value" actuator="LHand" mute="0" unit="1"><Key frame="41" value="0.702933" /><Key frame="54" value="0.702933" /><Key frame="78" value="0.8" /><Key frame="103" value="0.676387" /><Key frame="125" value="0.109844" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0"><Key frame="24" value="49.4806" /><Key frame="41" value="10.7204" /><Key frame="54" value="10.7204" /><Key frame="78" value="54.7541" /><Key frame="103" value="80.067" /><Key frame="125" value="84.8131" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0"><Key frame="24" value="1.75543" /><Key frame="41" value="0.876513" /><Key frame="54" value="0.876513" /><Key frame="78" value="52.3811" /><Key frame="103" value="33.6601" /><Key frame="125" value="3.86483" /></ActuatorCurve><ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0"><Key frame="41" value="-64.427" /><Key frame="54" value="-64.427" /><Key frame="78" value="-88" /><Key frame="103" value="-64.8665" /><Key frame="125" value="-8.00055" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0"><Key frame="22" value="30.2372" /><Key frame="39" value="89.5017" /><Key frame="52" value="89.5017" /><Key frame="76" value="41.0478" /><Key frame="101" value="23.9968" /><Key frame="123" value="25.0515" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0"><Key frame="22" value="119.496" /><Key frame="39" value="38.8457" /><Key frame="52" value="38.8457" /><Key frame="76" value="111.181" /><Key frame="101" value="119.442" /><Key frame="123" value="86.5709" /></ActuatorCurve><ActuatorCurve name="value" actuator="RHand" mute="0" unit="1"><Key frame="39" value="0.758933" /><Key frame="52" value="0.758933" /><Key frame="76" value="0.909091" /><Key frame="101" value="0.730569" /><Key frame="123" value="0.22548" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0"><Key frame="22" value="57.923" /><Key frame="39" value="1.76024" /><Key frame="52" value="1.76024" /><Key frame="76" value="63.3723" /><Key frame="101" value="80.0718" /><Key frame="123" value="88.0699" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0"><Key frame="22" value="-9.84628" /><Key frame="39" value="-6.24272" /><Key frame="52" value="-6.24272" /><Key frame="76" value="-48.6944" /><Key frame="101" value="-37.2685" /><Key frame="123" value="-2.46337" /></ActuatorCurve><ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0"><Key frame="39" value="56.9514" /><Key frame="52" value="56.9514" /><Key frame="76" value="80" /><Key frame="101" value="56.8635" /><Key frame="123" value="0.173379" /></ActuatorCurve></ActuatorList></Timeline><Resource name="Standing" type="Lock" timeout="1" /><Resource name="All motors" type="Lock" timeout="1" /></Box><Box name="Say Text" id="13" localization="8" tooltip="Say the text received on its input." x="387" y="557"><bitmap>media/images/box/interaction/say.png</bitmap><script language="4"><content><![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence))
            self.ids.append(id)
            self.tts.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" /><Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" /><Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" /><Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="95" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" /><Resource name="Speech" type="Lock" timeout="0" /></Box><Box name="Text Edit" id="14" localization="8" tooltip="Send the text you entered when the input is stimulated." plugin="textedit_plugin" x="60" y="537"><bitmap>media/images/box/interaction/vocabulary.png</bitmap><script language="4"><content><![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("Hi! I\'m Pepper!Welcome to the clinic! .. Don\'t be shy, come and say Hi!")]]></content></script><pluginContent><text><![CDATA[Hi! I'm Pepper!Welcome to the clinic! .. Don't be shy, come and say Hi!]]></text></pluginContent><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" /><Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" /></Box><Box name="chat (1)" id="15" localization="8" tooltip="" x="344" y="133"><dialogFile>../chat/chat.dlg</dialogFile><bitmap>media/images/box/box-dialog.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Input name="displayMenu" type="1" type_size="1" nature="1" inner="0" tooltip="" id="4" /><Input name="displayAboutus" type="1" type_size="1" nature="1" inner="0" tooltip="" id="5" /><Input name="displayNavigate" type="1" type_size="1" nature="1" inner="0" tooltip="" id="6" /><Input name="displayServices" type="1" type_size="1" nature="1" inner="0" tooltip="" id="7" /><Input name="displayOurteam" type="1" type_size="1" nature="1" inner="0" tooltip="" id="8" /><Input name="displayFeedback" type="1" type_size="1" nature="1" inner="0" tooltip="" id="9" /><Input name="displayGoodbye" type="1" type_size="1" nature="1" inner="0" tooltip="" id="10" /><Input name="displayHelp" type="1" type_size="1" nature="1" inner="0" tooltip="" id="11" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="12" /><Output name="onMenu" type="1" type_size="1" nature="2" inner="0" tooltip="" id="13" /><Output name="onAboutus" type="1" type_size="1" nature="2" inner="0" tooltip="" id="14" /><Output name="onNavigate" type="1" type_size="1" nature="2" inner="0" tooltip="" id="15" /><Output name="onServices" type="1" type_size="1" nature="2" inner="0" tooltip="" id="16" /><Output name="onOurteam" type="1" type_size="1" nature="2" inner="0" tooltip="" id="17" /><Output name="onFeedback" type="1" type_size="1" nature="2" inner="0" tooltip="" id="18" /><Output name="onGoodbye" type="1" type_size="1" nature="2" inner="0" tooltip="" id="19" /><Output name="onHelp" type="1" type_size="1" nature="2" inner="0" tooltip="" id="20" /></Box><Box name="Help" id="6" localization="8" tooltip="" x="686" y="824"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        #self.onStopped() #activate the output of the box

        uid = self.packageUid()
        ip = '192.168.0.160'
        url = 'http://' + ip + '/apps/' + uid + '/pages/dialog.html'
        self.session().service('ALTabletService').loadUrl(url)
        self.session().service('ALTabletService').showWebview()

        #self.asr_service.subscribe("my_box")
        #self.asr_service.pause(False)

    def onInput_onStop(self):
        #self.asr_service.pause(True)
        #self.asr_service.unsubscribe("my_box")
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Output name="Rating1" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" /></Box><Box name="Python Script" id="16" localization="8" tooltip="This box contains a basic python script and can be used to create any python script box you would like.&#x0A;&#x0A;To edit its script, double-click on it." x="470" y="823"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="3" indexofinput="2" outputowner="0" indexofoutput="4" /><Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="0" indexofinput="12" outputowner="5" indexofoutput="4" /><Link inputowner="5" indexofinput="2" outputowner="3" indexofoutput="4" /><Link inputowner="0" indexofinput="12" outputowner="2" indexofoutput="4" /><Link inputowner="0" indexofinput="12" outputowner="7" indexofoutput="4" /><Link inputowner="0" indexofinput="12" outputowner="8" indexofoutput="4" /><Link inputowner="0" indexofinput="12" outputowner="9" indexofoutput="4" /><Link inputowner="0" indexofinput="12" outputowner="10" indexofoutput="4" /><Link inputowner="0" indexofinput="12" outputowner="11" indexofoutput="4" /><Link inputowner="0" indexofinput="12" outputowner="12" indexofoutput="4" /><Link inputowner="13" indexofinput="2" outputowner="14" indexofoutput="3" /><Link inputowner="5" indexofinput="2" outputowner="15" indexofoutput="12" /><Link inputowner="2" indexofinput="2" outputowner="15" indexofoutput="13" /><Link inputowner="7" indexofinput="2" outputowner="15" indexofoutput="14" /><Link inputowner="8" indexofinput="2" outputowner="15" indexofoutput="15" /><Link inputowner="9" indexofinput="2" outputowner="15" indexofoutput="16" /><Link inputowner="10" indexofinput="2" outputowner="15" indexofoutput="17" /><Link inputowner="11" indexofinput="2" outputowner="15" indexofoutput="18" /><Link inputowner="5" indexofinput="2" outputowner="15" indexofoutput="19" /><Link inputowner="15" indexofinput="2" outputowner="1" indexofoutput="4" /><Link inputowner="15" indexofinput="2" outputowner="13" indexofoutput="4" /><Link inputowner="14" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="6" indexofinput="2" outputowner="15" indexofoutput="20" /><Link inputowner="0" indexofinput="12" outputowner="6" indexofoutput="4" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline></Box></ChoregrapheProject>